2022-04-18 18:06:16,220 [INFO] INFO: Configuration initialized!
2022-04-18 18:06:16,220 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:06:16,220 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:06:17,116 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:06:17,116 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:06:17,116 [INFO] INFO: Variable Definition:
2022-04-18 18:06:17,116 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:06:17,116 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:06:17,116 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:06:17,116 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:06:17,116 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:06:17,117 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:06:17,117 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:06:17,117 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:06:17,117 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:06:17,117 [INFO] INFO: Object Definition:
2022-04-18 18:06:17,117 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:06:17,117 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:06:17,118 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:06:17,118 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:06:17,118 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:06:17,118 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:06:17,118 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:06:17,118 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:06:17,119 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:06:17,119 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:06:17,119 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:06:17,119 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:06:30,013 [INFO] INFO: Configuration initialized!
2022-04-18 18:06:30,014 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:06:30,014 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:06:30,900 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:06:30,900 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:06:30,900 [INFO] INFO: Variable Definition:
2022-04-18 18:06:30,901 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:06:30,901 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:06:30,901 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:06:30,901 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:06:30,901 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:06:30,901 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:06:30,902 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:06:30,902 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:06:30,902 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:06:30,902 [INFO] INFO: Object Definition:
2022-04-18 18:06:30,902 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:06:30,903 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:06:30,903 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:06:30,903 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:06:30,903 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:06:30,903 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:06:30,904 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:06:30,904 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:06:30,904 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:06:30,904 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:06:30,905 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:06:30,905 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:08:44,029 [INFO] INFO: Configuration initialized!
2022-04-18 18:08:44,030 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:08:44,030 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:08:44,941 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:08:44,941 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:08:44,941 [INFO] INFO: Variable Definition:
2022-04-18 18:08:44,941 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:08:44,941 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:08:44,941 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:08:44,941 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:08:44,942 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:08:44,942 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:08:44,942 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:08:44,942 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:08:44,942 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:08:44,942 [INFO] INFO: Object Definition:
2022-04-18 18:08:44,943 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:08:44,943 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:08:44,943 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:08:44,943 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:08:44,944 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:08:44,944 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:08:44,944 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:08:44,944 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:08:44,945 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:08:44,945 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:08:44,945 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:08:44,945 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:09:38,757 [INFO] INFO: Configuration initialized!
2022-04-18 18:09:38,757 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:09:38,757 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:09:39,583 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:09:39,583 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:09:39,583 [INFO] INFO: Variable Definition:
2022-04-18 18:09:39,583 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:09:39,584 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:09:39,584 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:09:39,584 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:09:39,584 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:09:39,584 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:09:39,584 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:09:39,584 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:09:39,585 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:09:39,585 [INFO] INFO: Object Definition:
2022-04-18 18:09:39,585 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:09:39,585 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:09:39,585 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:09:39,585 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:09:39,585 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:09:39,586 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:09:39,586 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:09:39,586 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:09:39,586 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:09:39,586 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:09:39,586 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:09:39,586 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:12:02,018 [INFO] INFO: Configuration initialized!
2022-04-18 18:12:02,018 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:12:02,018 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:12:02,771 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:12:02,771 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:12:02,771 [INFO] INFO: Variable Definition:
2022-04-18 18:12:02,772 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:12:02,772 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:12:02,772 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:12:02,772 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:12:02,772 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:12:02,772 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:12:02,773 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:12:02,773 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:12:02,773 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:12:02,773 [INFO] INFO: Object Definition:
2022-04-18 18:12:02,773 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:12:02,773 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:12:02,773 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:12:02,774 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:12:02,774 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:12:02,774 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:12:02,774 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:12:02,774 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:12:02,774 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:12:02,775 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:12:02,775 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:12:02,775 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:12:47,172 [INFO] INFO: Configuration initialized!
2022-04-18 18:12:47,172 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:12:47,172 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:12:47,934 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:12:47,934 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:12:47,934 [INFO] INFO: Variable Definition:
2022-04-18 18:12:47,934 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:12:47,934 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:12:47,934 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:12:47,935 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:12:47,935 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:12:47,935 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:12:47,935 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:12:47,935 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:12:47,935 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:12:47,936 [INFO] INFO: Object Definition:
2022-04-18 18:12:47,936 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:12:47,936 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:12:47,936 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:12:47,936 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:12:47,937 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:12:47,937 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:12:47,937 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:12:47,937 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:12:47,937 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:12:47,937 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:12:47,938 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:12:47,938 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:14:02,530 [INFO] INFO: Configuration initialized!
2022-04-18 18:14:02,531 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:14:02,531 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:14:03,281 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:14:03,281 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:14:03,281 [INFO] INFO: Variable Definition:
2022-04-18 18:14:03,282 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:14:03,282 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:14:03,282 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:14:03,282 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:14:03,282 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:14:03,282 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:14:03,283 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:14:03,283 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:14:03,283 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:14:03,283 [INFO] INFO: Object Definition:
2022-04-18 18:14:03,283 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:14:03,283 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:14:03,284 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:14:03,284 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:14:03,284 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:14:03,284 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:14:03,285 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:14:03,285 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:14:03,285 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:14:03,286 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:14:03,286 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:14:03,286 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:17:14,550 [INFO] INFO: Configuration initialized!
2022-04-18 18:17:14,551 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:17:14,551 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:17:15,609 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:17:15,609 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:17:15,610 [INFO] INFO: Variable Definition:
2022-04-18 18:17:15,610 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:17:15,610 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:17:15,611 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:17:15,612 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:17:15,612 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:17:15,612 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:17:15,612 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:17:15,613 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:17:15,613 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:17:15,613 [INFO] INFO: Object Definition:
2022-04-18 18:17:15,613 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:17:15,613 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:17:15,613 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:17:15,613 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:17:15,614 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:17:15,614 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:17:15,614 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:17:15,614 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:17:15,614 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:17:15,614 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:17:15,615 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:17:15,615 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:19:11,249 [INFO] INFO: Configuration initialized!
2022-04-18 18:19:11,249 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:19:11,250 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:19:12,017 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:19:12,017 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:19:12,017 [INFO] INFO: Variable Definition:
2022-04-18 18:19:12,017 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:19:12,017 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:19:12,017 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:19:12,017 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:19:12,017 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:19:12,017 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:19:12,018 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:19:12,018 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:19:12,018 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:19:12,018 [INFO] INFO: Object Definition:
2022-04-18 18:19:12,018 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:19:12,018 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:19:12,018 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:19:12,019 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:19:12,019 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:19:12,019 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:19:12,019 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:19:12,019 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:19:12,019 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:19:12,020 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:19:12,020 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:19:12,020 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:19:36,012 [INFO] INFO: Configuration initialized!
2022-04-18 18:19:36,013 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:19:36,013 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:19:36,960 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:19:36,960 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:19:36,960 [INFO] INFO: Variable Definition:
2022-04-18 18:19:36,960 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:19:36,960 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:19:36,960 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:19:36,961 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:19:36,961 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:19:36,961 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:19:36,961 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:19:36,961 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:19:36,961 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:19:36,961 [INFO] INFO: Object Definition:
2022-04-18 18:19:36,962 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:19:36,962 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:19:36,962 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:19:36,962 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:19:36,962 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:19:36,962 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:19:36,962 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:19:36,963 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:19:36,963 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:19:36,963 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:19:36,963 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:19:36,963 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:21:17,822 [INFO] INFO: Configuration initialized!
2022-04-18 18:21:17,822 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:21:17,822 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:21:18,615 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:21:18,615 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:21:18,615 [INFO] INFO: Variable Definition:
2022-04-18 18:21:18,615 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:21:18,615 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:21:18,615 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:21:18,615 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:21:18,616 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:21:18,616 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:21:18,616 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:21:18,616 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:21:18,616 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:21:18,616 [INFO] INFO: Object Definition:
2022-04-18 18:21:18,617 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:21:18,617 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:21:18,617 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:21:18,617 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:21:18,617 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:21:18,618 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:21:18,618 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:21:18,618 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:21:18,618 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:21:18,618 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:21:18,619 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:21:18,619 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 18:41:30,191 [INFO] INFO: Configuration initialized!
2022-04-18 18:41:30,192 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 18:41:30,192 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 18:41:30,956 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 18:41:30,956 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 18:41:30,956 [INFO] INFO: Variable Definition:
2022-04-18 18:41:30,956 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 18:41:30,957 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 18:41:30,957 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 18:41:30,957 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 18:41:30,957 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 18:41:30,957 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 18:41:30,957 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 18:41:30,957 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 18:41:30,957 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 18:41:30,957 [INFO] INFO: Object Definition:
2022-04-18 18:41:30,958 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 18:41:30,958 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 18:41:30,958 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 18:41:30,958 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 18:41:30,958 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 18:41:30,959 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 18:41:30,959 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 18:41:30,959 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 18:41:30,959 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 18:41:30,959 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 18:41:30,959 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 18:41:30,959 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 20:33:51,545 [INFO] INFO: Configuration initialized!
2022-04-18 20:33:51,547 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 20:33:51,547 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 20:33:52,350 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 20:33:52,350 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 20:33:52,350 [INFO] INFO: Variable Definition:
2022-04-18 20:33:52,351 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 20:33:52,351 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 20:33:52,351 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 20:33:52,351 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 20:33:52,351 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 20:33:52,351 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 20:33:52,351 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 20:33:52,352 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 20:33:52,352 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 20:33:52,352 [INFO] INFO: Object Definition:
2022-04-18 20:33:52,352 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 20:33:52,352 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 20:33:52,352 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 20:33:52,353 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 20:33:52,353 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 20:33:52,353 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 20:33:52,353 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 20:33:52,353 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 20:33:52,353 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 20:33:52,353 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 20:33:52,353 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 20:33:52,353 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 20:44:39,151 [INFO] INFO: Configuration initialized!
2022-04-18 20:44:39,152 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 20:44:39,152 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 20:44:39,971 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 20:44:39,971 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 20:44:39,971 [INFO] INFO: Variable Definition:
2022-04-18 20:44:39,972 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 20:44:39,972 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 20:44:39,972 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 20:44:39,972 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 20:44:39,972 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 20:44:39,972 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 20:44:39,973 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 20:44:39,973 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 20:44:39,973 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 20:44:39,973 [INFO] INFO: Object Definition:
2022-04-18 20:44:39,973 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 20:44:39,973 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 20:44:39,974 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 20:44:39,974 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 20:44:39,974 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 20:44:39,974 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 20:44:39,975 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 20:44:39,975 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 20:44:39,975 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 20:44:39,975 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 20:44:39,975 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 20:44:39,975 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 20:55:27,725 [INFO] INFO: Configuration initialized!
2022-04-18 20:55:27,725 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 20:55:27,725 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 20:55:28,610 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 20:55:28,610 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 20:55:28,610 [INFO] INFO: Variable Definition:
2022-04-18 20:55:28,610 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 20:55:28,611 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 20:55:28,611 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 20:55:28,611 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 20:55:28,611 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 20:55:28,611 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 20:55:28,611 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 20:55:28,611 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 20:55:28,611 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 20:55:28,611 [INFO] INFO: Object Definition:
2022-04-18 20:55:28,611 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 20:55:28,612 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 20:55:28,612 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 20:55:28,612 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 20:55:28,612 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 20:55:28,612 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 20:55:28,612 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 20:55:28,612 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 20:55:28,612 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 20:55:28,613 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 20:55:28,613 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 20:55:28,613 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 21:00:28,976 [INFO] INFO: Configuration initialized!
2022-04-18 21:00:28,976 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 21:00:28,982 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 21:00:29,828 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 21:00:29,829 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 21:00:29,829 [INFO] INFO: Variable Definition:
2022-04-18 21:00:29,829 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 21:00:29,829 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 21:00:29,829 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 21:00:29,829 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 21:00:29,830 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 21:00:29,830 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 21:00:29,830 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 21:00:29,830 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 21:00:29,830 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 21:00:29,830 [INFO] INFO: Object Definition:
2022-04-18 21:00:29,831 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 21:00:29,831 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 21:00:29,831 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 21:00:29,831 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 21:00:29,831 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 21:00:29,831 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 21:00:29,832 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 21:00:29,832 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 21:00:29,832 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 21:00:29,832 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 21:00:29,832 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 21:00:29,832 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 21:17:34,272 [INFO] INFO: Configuration initialized!
2022-04-18 21:17:34,273 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 21:17:34,273 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 21:17:35,079 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 21:17:35,079 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 21:17:35,079 [INFO] INFO: Variable Definition:
2022-04-18 21:17:35,079 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 21:17:35,079 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 21:17:35,079 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 21:17:35,079 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 21:17:35,079 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 21:17:35,079 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 21:17:35,080 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 21:17:35,080 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 21:17:35,080 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 21:17:35,080 [INFO] INFO: Object Definition:
2022-04-18 21:17:35,080 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 21:17:35,080 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 21:17:35,080 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 21:17:35,081 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 21:17:35,081 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 21:17:35,081 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 21:17:35,081 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 21:17:35,081 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 21:17:35,081 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 21:17:35,082 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 21:17:35,082 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 21:17:35,082 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 21:32:47,682 [INFO] INFO: Configuration initialized!
2022-04-18 21:32:47,682 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 21:32:47,682 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 21:32:48,537 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 21:32:48,537 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 21:32:48,537 [INFO] INFO: Variable Definition:
2022-04-18 21:32:48,537 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 21:32:48,537 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 21:32:48,538 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 21:32:48,538 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 21:32:48,538 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 21:32:48,538 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 21:32:48,538 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 21:32:48,538 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 21:32:48,538 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 21:32:48,539 [INFO] INFO: Object Definition:
2022-04-18 21:32:48,539 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 21:32:48,539 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 21:32:48,539 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 21:32:48,539 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 21:32:48,539 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 21:32:48,540 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 21:32:48,540 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 21:32:48,540 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 21:32:48,540 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 21:32:48,540 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 21:32:48,540 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 21:32:48,540 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 21:33:22,919 [INFO] INFO: Configuration initialized!
2022-04-18 21:33:22,919 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 21:33:22,920 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 21:33:23,858 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 21:33:23,858 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 21:33:23,858 [INFO] INFO: Variable Definition:
2022-04-18 21:33:23,858 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 21:33:23,858 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 21:33:23,859 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 21:33:23,859 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 21:33:23,859 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 21:33:23,859 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 21:33:23,859 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 21:33:23,859 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 21:33:23,860 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 21:33:23,860 [INFO] INFO: Object Definition:
2022-04-18 21:33:23,860 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 21:33:23,860 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 21:33:23,860 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 21:33:23,860 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 21:33:23,861 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 21:33:23,861 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 21:33:23,861 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 21:33:23,861 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 21:33:23,861 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 21:33:23,861 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 21:33:23,862 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 21:33:23,862 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 21:38:10,009 [INFO] INFO: Configuration initialized!
2022-04-18 21:38:10,009 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 21:38:10,009 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 21:38:10,816 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 21:38:10,816 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 21:38:10,816 [INFO] INFO: Variable Definition:
2022-04-18 21:38:10,816 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 21:38:10,817 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 21:38:10,817 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 21:38:10,817 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 21:38:10,817 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 21:38:10,817 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 21:38:10,818 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 21:38:10,818 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 21:38:10,818 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 21:38:10,818 [INFO] INFO: Object Definition:
2022-04-18 21:38:10,818 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 21:38:10,818 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 21:38:10,818 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 21:38:10,819 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 21:38:10,819 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 21:38:10,819 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 21:38:10,819 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 21:38:10,819 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 21:38:10,820 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 21:38:10,820 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 21:38:10,820 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 21:38:10,820 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 22:18:57,974 [INFO] INFO: Configuration initialized!
2022-04-18 22:18:57,975 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 22:18:57,975 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 22:18:58,838 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 22:18:58,838 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 22:18:58,838 [INFO] INFO: Variable Definition:
2022-04-18 22:18:58,839 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 22:18:58,839 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 22:18:58,839 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 22:18:58,839 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 22:18:58,839 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 22:18:58,839 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 22:18:58,840 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 22:18:58,840 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 22:18:58,840 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 22:18:58,840 [INFO] INFO: Object Definition:
2022-04-18 22:18:58,840 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 22:18:58,840 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 22:18:58,840 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 22:18:58,841 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 22:18:58,841 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 22:18:58,841 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 22:18:58,841 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 22:18:58,841 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 22:18:58,841 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 22:18:58,841 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 22:18:58,842 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 22:18:58,842 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 22:26:21,298 [INFO] INFO: Configuration initialized!
2022-04-18 22:26:21,298 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 22:26:21,298 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 22:26:22,223 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 22:26:22,223 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 22:26:22,223 [INFO] INFO: Variable Definition:
2022-04-18 22:26:22,223 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 22:26:22,223 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 22:26:22,223 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 22:26:22,224 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 22:26:22,224 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 22:26:22,224 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 22:26:22,224 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 22:26:22,224 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 22:26:22,224 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 22:26:22,224 [INFO] INFO: Object Definition:
2022-04-18 22:26:22,225 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 22:26:22,225 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 22:26:22,225 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 22:26:22,225 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 22:26:22,225 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 22:26:22,225 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 22:26:22,225 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 22:26:22,226 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 22:26:22,226 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 22:26:22,226 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 22:26:22,226 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 22:26:22,226 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 22:26:41,097 [INFO] INFO: Configuration initialized!
2022-04-18 22:26:41,098 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 22:26:41,098 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 22:26:42,087 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 22:26:42,088 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 22:26:42,088 [INFO] INFO: Variable Definition:
2022-04-18 22:26:42,088 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 22:26:42,088 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 22:26:42,088 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 22:26:42,088 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 22:26:42,088 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 22:26:42,088 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 22:26:42,089 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 22:26:42,089 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 22:26:42,089 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 22:26:42,089 [INFO] INFO: Object Definition:
2022-04-18 22:26:42,089 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 22:26:42,089 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 22:26:42,089 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 22:26:42,090 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 22:26:42,090 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 22:26:42,090 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 22:26:42,090 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 22:26:42,090 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 22:26:42,090 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 22:26:42,090 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 22:26:42,091 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 22:26:42,091 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 22:33:30,285 [INFO] INFO: Configuration initialized!
2022-04-18 22:33:30,285 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 22:33:30,285 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 22:33:31,031 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 22:33:31,031 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 22:33:31,031 [INFO] INFO: Variable Definition:
2022-04-18 22:33:31,031 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 22:33:31,031 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 22:33:31,031 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 22:33:31,031 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 22:33:31,031 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 22:33:31,032 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 22:33:31,032 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 22:33:31,032 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 22:33:31,032 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 22:33:31,032 [INFO] INFO: Object Definition:
2022-04-18 22:33:31,032 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 22:33:31,032 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 22:33:31,033 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 22:33:31,033 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 22:33:31,033 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 22:33:31,033 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 22:33:31,033 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 22:33:31,033 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 22:33:31,033 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 22:33:31,033 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 22:33:31,033 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 22:33:31,033 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 22:35:13,189 [INFO] INFO: Configuration initialized!
2022-04-18 22:35:13,190 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 22:35:13,190 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 22:35:13,964 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 22:35:13,964 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 22:35:13,964 [INFO] INFO: Variable Definition:
2022-04-18 22:35:13,964 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 22:35:13,964 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 22:35:13,964 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 22:35:13,965 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 22:35:13,965 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 22:35:13,965 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 22:35:13,965 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 22:35:13,965 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 22:35:13,965 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 22:35:13,966 [INFO] INFO: Object Definition:
2022-04-18 22:35:13,966 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 22:35:13,966 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 22:35:13,966 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 22:35:13,966 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 22:35:13,966 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 22:35:13,966 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 22:35:13,967 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 22:35:13,967 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 22:35:13,967 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 22:35:13,967 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 22:35:13,967 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 22:35:13,967 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 22:44:09,039 [INFO] INFO: Configuration initialized!
2022-04-18 22:44:09,039 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 22:44:09,039 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 22:44:09,789 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 22:44:09,789 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 22:44:09,790 [INFO] INFO: Variable Definition:
2022-04-18 22:44:09,790 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 22:44:09,790 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 22:44:09,790 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 22:44:09,790 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 22:44:09,790 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 22:44:09,791 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 22:44:09,791 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 22:44:09,791 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 22:44:09,791 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 22:44:09,791 [INFO] INFO: Object Definition:
2022-04-18 22:44:09,791 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 22:44:09,791 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 22:44:09,792 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 22:44:09,792 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 22:44:09,792 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 22:44:09,792 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 22:44:09,792 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 22:44:09,792 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 22:44:09,793 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 22:44:09,793 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 22:44:09,793 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 22:44:09,793 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 23:23:07,358 [INFO] INFO: Configuration initialized!
2022-04-18 23:23:07,358 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 23:23:07,358 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 23:23:08,158 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 23:23:08,158 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 23:23:08,158 [INFO] INFO: Variable Definition:
2022-04-18 23:23:08,158 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 23:23:08,158 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 23:23:08,158 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 23:23:08,158 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 23:23:08,159 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 23:23:08,159 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 23:23:08,159 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 23:23:08,159 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 23:23:08,159 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 23:23:08,159 [INFO] INFO: Object Definition:
2022-04-18 23:23:08,159 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 23:23:08,159 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 23:23:08,160 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 23:23:08,160 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 23:23:08,160 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 23:23:08,160 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 23:23:08,160 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 23:23:08,160 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 23:23:08,160 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 23:23:08,161 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 23:23:08,161 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 23:23:08,161 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-18 23:57:20,051 [INFO] INFO: Configuration initialized!
2022-04-18 23:57:20,052 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-18 23:57:20,052 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-18 23:57:21,243 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-18 23:57:21,244 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-18 23:57:21,244 [INFO] INFO: Variable Definition:
2022-04-18 23:57:21,244 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-18 23:57:21,244 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-18 23:57:21,244 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-18 23:57:21,244 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-18 23:57:21,245 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-18 23:57:21,245 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-18 23:57:21,245 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-18 23:57:21,245 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-18 23:57:21,245 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-18 23:57:21,245 [INFO] INFO: Object Definition:
2022-04-18 23:57:21,246 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-18 23:57:21,246 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-18 23:57:21,246 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-18 23:57:21,246 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-18 23:57:21,246 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-18 23:57:21,246 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-18 23:57:21,246 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-18 23:57:21,247 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-18 23:57:21,247 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-18 23:57:21,247 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-18 23:57:21,247 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-18 23:57:21,247 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 00:51:01,514 [INFO] INFO: Configuration initialized!
2022-04-19 00:51:01,515 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 00:51:01,515 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 00:51:03,047 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 00:51:03,047 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 00:51:03,048 [INFO] INFO: Variable Definition:
2022-04-19 00:51:03,048 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 00:51:03,048 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 00:51:03,048 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 00:51:03,048 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 00:51:03,048 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 00:51:03,048 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 00:51:03,049 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 00:51:03,049 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 00:51:03,049 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 00:51:03,049 [INFO] INFO: Object Definition:
2022-04-19 00:51:03,050 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 00:51:03,051 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 00:51:03,051 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 00:51:03,051 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 00:51:03,052 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 00:51:03,052 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 00:51:03,052 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 00:51:03,053 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 00:51:03,053 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 00:51:03,053 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 00:51:03,053 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 00:51:03,054 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 00:51:56,156 [INFO] INFO: Configuration initialized!
2022-04-19 00:51:56,157 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 00:51:56,157 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 00:51:57,588 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 00:51:57,588 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 00:51:57,589 [INFO] INFO: Variable Definition:
2022-04-19 00:51:57,589 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 00:51:57,589 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 00:51:57,589 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 00:51:57,589 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 00:51:57,589 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 00:51:57,589 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 00:51:57,589 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 00:51:57,590 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 00:51:57,590 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 00:51:57,590 [INFO] INFO: Object Definition:
2022-04-19 00:51:57,590 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 00:51:57,590 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 00:51:57,590 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 00:51:57,590 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 00:51:57,591 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 00:51:57,591 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 00:51:57,591 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 00:51:57,591 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 00:51:57,591 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 00:51:57,592 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 00:51:57,592 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 00:51:57,592 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:07:52,967 [INFO] INFO: Configuration initialized!
2022-04-19 01:07:52,968 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:07:52,968 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:07:55,795 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:07:55,795 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:07:55,795 [INFO] INFO: Variable Definition:
2022-04-19 01:07:55,796 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:07:55,796 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:07:55,797 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:07:55,798 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:07:55,799 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:07:55,799 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:07:55,800 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:07:55,800 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:07:55,800 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:07:55,801 [INFO] INFO: Object Definition:
2022-04-19 01:07:55,801 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:07:55,802 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:07:55,802 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:07:55,802 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:07:55,802 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:07:55,802 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:07:55,803 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:07:55,803 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:07:55,803 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:07:55,803 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:07:55,803 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:07:55,804 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:10:05,803 [INFO] INFO: Configuration initialized!
2022-04-19 01:10:05,804 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:10:05,804 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:10:07,077 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:10:07,078 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:10:07,078 [INFO] INFO: Variable Definition:
2022-04-19 01:10:07,078 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:10:07,078 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:10:07,078 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:10:07,078 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:10:07,078 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:10:07,078 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:10:07,079 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:10:07,079 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:10:07,079 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:10:07,079 [INFO] INFO: Object Definition:
2022-04-19 01:10:07,079 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:10:07,079 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:10:07,079 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:10:07,080 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:10:07,080 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:10:07,080 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:10:07,080 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:10:07,080 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:10:07,081 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:10:07,081 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:10:07,081 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:10:07,081 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:15:24,152 [INFO] INFO: Configuration initialized!
2022-04-19 01:15:24,152 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:15:24,153 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:15:25,547 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:15:25,547 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:15:25,547 [INFO] INFO: Variable Definition:
2022-04-19 01:15:25,548 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:15:25,548 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:15:25,548 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:15:25,548 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:15:25,548 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:15:25,548 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:15:25,548 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:15:25,549 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:15:25,549 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:15:25,549 [INFO] INFO: Object Definition:
2022-04-19 01:15:25,549 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:15:25,549 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:15:25,550 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:15:25,550 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:15:25,550 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:15:25,550 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:15:25,550 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:15:25,550 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:15:25,550 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:15:25,551 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:15:25,551 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:15:25,551 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:20:37,192 [INFO] INFO: Configuration initialized!
2022-04-19 01:20:37,192 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:20:37,192 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:20:38,641 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:20:38,641 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:20:38,641 [INFO] INFO: Variable Definition:
2022-04-19 01:20:38,642 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:20:38,642 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:20:38,642 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:20:38,643 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:20:38,643 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:20:38,644 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:20:38,645 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:20:38,646 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:20:38,647 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:20:38,648 [INFO] INFO: Object Definition:
2022-04-19 01:20:38,649 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:20:38,649 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:20:38,653 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:20:38,654 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:20:38,656 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:20:38,658 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:20:38,660 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:20:38,661 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:20:38,662 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:20:38,664 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:20:38,664 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:20:38,664 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:21:37,746 [INFO] INFO: Configuration initialized!
2022-04-19 01:21:37,747 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:21:37,747 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:21:38,985 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:21:38,986 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:21:38,986 [INFO] INFO: Variable Definition:
2022-04-19 01:21:38,986 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:21:38,986 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:21:38,987 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:21:38,987 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:21:38,988 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:21:38,989 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:21:38,990 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:21:38,991 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:21:38,992 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:21:38,993 [INFO] INFO: Object Definition:
2022-04-19 01:21:38,994 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:21:38,995 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:21:38,996 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:21:38,998 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:21:38,999 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:21:39,002 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:21:39,003 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:21:39,005 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:21:39,006 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:21:39,007 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:21:39,007 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:21:39,007 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:22:20,510 [INFO] INFO: Configuration initialized!
2022-04-19 01:22:20,510 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:22:20,511 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:22:21,654 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:22:21,654 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:22:21,654 [INFO] INFO: Variable Definition:
2022-04-19 01:22:21,655 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:22:21,655 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:22:21,655 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:22:21,655 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:22:21,655 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:22:21,656 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:22:21,656 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:22:21,656 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:22:21,656 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:22:21,657 [INFO] INFO: Object Definition:
2022-04-19 01:22:21,657 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:22:21,657 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:22:21,657 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:22:21,658 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:22:21,658 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:22:21,658 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:22:21,658 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:22:21,658 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:22:21,659 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:22:21,660 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:22:21,660 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:22:21,660 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:23:23,261 [INFO] INFO: Configuration initialized!
2022-04-19 01:23:23,261 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:23:23,261 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:23:24,454 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:23:24,455 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:23:24,456 [INFO] INFO: Variable Definition:
2022-04-19 01:23:24,456 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:23:24,458 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:23:24,459 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:23:24,459 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:23:24,459 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:23:24,459 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:23:24,459 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:23:24,459 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:23:24,459 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:23:24,460 [INFO] INFO: Object Definition:
2022-04-19 01:23:24,460 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:23:24,460 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:23:24,460 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:23:24,460 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:23:24,460 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:23:24,460 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:23:24,460 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:23:24,461 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:23:24,461 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:23:24,461 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:23:24,461 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:23:24,461 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:32:53,799 [INFO] INFO: Configuration initialized!
2022-04-19 01:32:53,800 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:32:53,800 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:32:54,979 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:32:54,979 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:32:54,979 [INFO] INFO: Variable Definition:
2022-04-19 01:32:54,980 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:32:54,980 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:32:54,980 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:32:54,980 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:32:54,980 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:32:54,980 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:32:54,981 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:32:54,982 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:32:54,982 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:32:54,982 [INFO] INFO: Object Definition:
2022-04-19 01:32:54,982 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:32:54,982 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:32:54,983 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:32:54,983 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:32:54,983 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:32:54,983 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:32:54,983 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:32:54,984 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:32:54,984 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:32:54,984 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:32:54,984 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:32:54,985 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:34:38,139 [INFO] INFO: Configuration initialized!
2022-04-19 01:34:38,140 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:34:38,140 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:34:39,659 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:34:39,659 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:34:39,660 [INFO] INFO: Variable Definition:
2022-04-19 01:34:39,660 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:34:39,660 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:34:39,660 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:34:39,660 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:34:39,660 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:34:39,661 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:34:39,661 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:34:39,661 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:34:39,661 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:34:39,661 [INFO] INFO: Object Definition:
2022-04-19 01:34:39,661 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:34:39,661 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:34:39,661 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:34:39,662 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:34:39,662 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:34:39,662 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:34:39,662 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:34:39,662 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:34:39,662 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:34:39,663 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:34:39,663 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:34:39,663 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:35:23,428 [INFO] INFO: Configuration initialized!
2022-04-19 01:35:23,428 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:35:23,429 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:35:31,983 [INFO] INFO: Configuration initialized!
2022-04-19 01:35:31,983 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:35:31,983 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:35:33,385 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:35:33,385 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:35:33,386 [INFO] INFO: Variable Definition:
2022-04-19 01:35:33,386 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:35:33,386 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:35:33,386 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:35:33,386 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:35:33,386 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:35:33,387 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:35:33,387 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:35:33,387 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:35:33,387 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:35:33,387 [INFO] INFO: Object Definition:
2022-04-19 01:35:33,387 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:35:33,387 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:35:33,387 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:35:33,388 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:35:33,388 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:35:33,388 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:35:33,388 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:35:33,388 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:35:33,389 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:35:33,389 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:35:33,389 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:35:33,389 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:42:21,435 [INFO] INFO: Configuration initialized!
2022-04-19 01:42:21,437 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:42:21,437 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:42:22,907 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:42:22,907 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:42:22,907 [INFO] INFO: Variable Definition:
2022-04-19 01:42:22,907 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:42:22,907 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:42:22,908 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:42:22,908 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:42:22,908 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:42:22,908 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:42:22,908 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:42:22,908 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:42:22,908 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:42:22,908 [INFO] INFO: Object Definition:
2022-04-19 01:42:22,909 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:42:22,909 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:42:22,909 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:42:22,909 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:42:22,909 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:42:22,910 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:42:22,910 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:42:22,910 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:42:22,910 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:42:22,911 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:42:22,911 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:42:22,911 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 01:43:11,782 [INFO] INFO: Configuration initialized!
2022-04-19 01:43:11,782 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 01:43:11,782 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 01:43:13,090 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 01:43:13,090 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 01:43:13,091 [INFO] INFO: Variable Definition:
2022-04-19 01:43:13,091 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 01:43:13,091 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 01:43:13,091 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 01:43:13,091 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 01:43:13,091 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 01:43:13,091 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 01:43:13,092 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 01:43:13,092 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 01:43:13,092 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 01:43:13,093 [INFO] INFO: Object Definition:
2022-04-19 01:43:13,093 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 01:43:13,095 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 01:43:13,097 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 01:43:13,099 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 01:43:13,100 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 01:43:13,103 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 01:43:13,105 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 01:43:13,107 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 01:43:13,114 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 01:43:13,116 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 01:43:13,116 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 01:43:13,118 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-19 20:24:34,601 [INFO] INFO: Configuration initialized!
2022-04-19 20:24:34,602 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-19 20:24:34,602 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-19 20:24:35,710 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-19 20:24:35,711 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-19 20:24:35,711 [INFO] INFO: Variable Definition:
2022-04-19 20:24:35,711 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-19 20:24:35,711 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-19 20:24:35,712 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-19 20:24:35,712 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-19 20:24:35,712 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-19 20:24:35,712 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-19 20:24:35,712 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-19 20:24:35,713 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-19 20:24:35,713 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-19 20:24:35,713 [INFO] INFO: Object Definition:
2022-04-19 20:24:35,713 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-19 20:24:35,714 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-19 20:24:35,714 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-19 20:24:35,714 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-19 20:24:35,715 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-19 20:24:35,715 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-19 20:24:35,715 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-19 20:24:35,715 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-19 20:24:35,716 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-19 20:24:35,718 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-19 20:24:35,719 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-19 20:24:35,719 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-22 01:23:28,884 [INFO] INFO: Configuration initialized!
2022-04-22 01:23:28,884 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 01:23:28,884 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 01:23:29,787 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-22 01:23:29,787 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-22 01:23:29,787 [INFO] INFO: Variable Definition:
2022-04-22 01:23:29,787 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-22 01:23:29,787 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-22 01:23:29,788 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-22 01:23:29,788 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-22 01:23:29,788 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-22 01:23:29,788 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-22 01:23:29,788 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-22 01:23:29,788 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-22 01:23:29,788 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-22 01:23:29,789 [INFO] INFO: Object Definition:
2022-04-22 01:23:29,789 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-22 01:23:29,789 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-22 01:23:29,789 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-22 01:23:29,789 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-22 01:23:29,790 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-22 01:23:29,790 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-22 01:23:29,790 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-22 01:23:29,790 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-22 01:23:29,790 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-22 01:23:29,790 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-22 01:23:29,791 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-22 01:23:29,791 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-22 01:41:33,455 [INFO] INFO: Configuration initialized!
2022-04-22 01:41:33,456 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 01:41:33,456 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 01:41:34,266 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-22 01:41:34,267 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-22 01:41:34,273 [INFO] INFO: Variable Definition:
2022-04-22 01:41:34,273 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-22 01:41:34,273 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-22 01:41:34,274 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-22 01:41:34,274 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-22 01:41:34,274 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-22 01:41:34,274 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-22 01:41:34,274 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-22 01:41:34,274 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-22 01:41:34,275 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-22 01:41:34,275 [INFO] INFO: Object Definition:
2022-04-22 01:41:34,275 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-22 01:41:34,275 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-22 01:41:34,275 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-22 01:41:34,275 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-22 01:41:34,275 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-22 01:41:34,276 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-22 01:41:34,276 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-22 01:41:34,276 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-22 01:41:34,276 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-22 01:41:34,276 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-22 01:41:34,277 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-22 01:41:34,277 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-22 02:03:52,033 [INFO] INFO: Configuration initialized!
2022-04-22 02:03:52,034 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 02:03:52,034 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 02:04:15,482 [INFO] INFO: Configuration initialized!
2022-04-22 02:04:15,483 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 02:04:15,483 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 02:04:16,436 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-22 02:04:16,436 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-22 02:04:16,436 [INFO] INFO: Variable Definition:
2022-04-22 02:04:16,437 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-22 02:04:16,437 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-22 02:04:16,437 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-22 02:04:16,437 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-22 02:04:16,437 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-22 02:04:16,438 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-22 02:04:16,438 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-22 02:04:16,438 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-22 02:04:16,438 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-22 02:04:16,438 [INFO] INFO: Object Definition:
2022-04-22 02:04:16,438 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-22 02:04:16,439 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-22 02:04:16,439 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-22 02:04:16,439 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-22 02:04:16,439 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-22 02:04:16,439 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-22 02:04:16,439 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-22 02:04:16,440 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-22 02:04:16,440 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-22 02:04:16,440 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-22 02:04:16,440 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-22 02:04:16,440 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-22 03:38:06,321 [INFO] INFO: Configuration initialized!
2022-04-22 03:38:06,323 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 03:38:06,323 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 03:38:08,436 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-22 03:38:08,437 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-22 03:38:08,437 [INFO] INFO: Variable Definition:
2022-04-22 03:38:08,437 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-22 03:38:08,437 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-22 03:38:08,437 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-22 03:38:08,437 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-22 03:38:08,438 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-22 03:38:08,438 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-22 03:38:08,438 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-22 03:38:08,438 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-22 03:38:08,438 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-22 03:38:08,439 [INFO] INFO: Object Definition:
2022-04-22 03:38:08,439 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-22 03:38:08,439 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-22 03:38:08,439 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-22 03:38:08,439 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-22 03:38:08,440 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-22 03:38:08,440 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-22 03:38:08,440 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-22 03:38:08,441 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-22 03:38:08,441 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-22 03:38:08,441 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-22 03:38:08,441 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-22 03:38:08,441 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-22 03:51:48,872 [INFO] INFO: Configuration initialized!
2022-04-22 03:51:48,872 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 03:51:48,872 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 03:51:50,038 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-22 03:51:50,038 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-22 03:51:50,038 [INFO] INFO: Variable Definition:
2022-04-22 03:51:50,038 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-22 03:51:50,039 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-22 03:51:50,039 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-22 03:51:50,039 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-22 03:51:50,039 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-22 03:51:50,039 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-22 03:51:50,040 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-22 03:51:50,040 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-22 03:51:50,040 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-22 03:51:50,040 [INFO] INFO: Object Definition:
2022-04-22 03:51:50,040 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-22 03:51:50,040 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-22 03:51:50,041 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-22 03:51:50,041 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-22 03:51:50,041 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-22 03:51:50,042 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-22 03:51:50,042 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-22 03:51:50,042 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-22 03:51:50,043 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-22 03:51:50,043 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-22 03:51:50,043 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-22 03:51:50,043 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-22 04:43:59,785 [INFO] INFO: Configuration initialized!
2022-04-22 04:43:59,785 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 04:43:59,786 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 04:44:00,618 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-22 04:44:00,619 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-22 04:44:00,619 [INFO] INFO: Variable Definition:
2022-04-22 04:44:00,619 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-22 04:44:00,619 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-22 04:44:00,619 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-22 04:44:00,620 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-22 04:44:00,620 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-22 04:44:00,620 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-22 04:44:00,620 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-22 04:44:00,620 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-22 04:44:00,620 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-22 04:44:00,620 [INFO] INFO: Object Definition:
2022-04-22 04:44:00,620 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-22 04:44:00,621 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-22 04:44:00,621 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-22 04:44:00,621 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-22 04:44:00,621 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-22 04:44:00,621 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-22 04:44:00,621 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-22 04:44:00,621 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-22 04:44:00,621 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-22 04:44:00,622 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-22 04:44:00,622 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-22 04:44:00,622 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-22 05:11:06,402 [INFO] INFO: Configuration initialized!
2022-04-22 05:11:06,403 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 05:11:06,404 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 05:11:07,201 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-22 05:11:07,201 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-22 05:11:07,201 [INFO] INFO: Variable Definition:
2022-04-22 05:11:07,201 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-22 05:11:07,201 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-22 05:11:07,201 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-22 05:11:07,202 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-22 05:11:07,202 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-22 05:11:07,202 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-22 05:11:07,202 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-22 05:11:07,202 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-22 05:11:07,202 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-22 05:11:07,202 [INFO] INFO: Object Definition:
2022-04-22 05:11:07,202 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-22 05:11:07,202 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-22 05:11:07,203 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-22 05:11:07,203 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-22 05:11:07,203 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-22 05:11:07,203 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-22 05:11:07,203 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-22 05:11:07,203 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-22 05:11:07,203 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-22 05:11:07,203 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-22 05:11:07,204 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-22 05:11:07,204 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-22 05:13:10,048 [INFO] INFO: Configuration initialized!
2022-04-22 05:13:10,048 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 05:13:10,048 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 05:13:10,806 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-22 05:13:10,806 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-22 05:13:10,806 [INFO] INFO: Variable Definition:
2022-04-22 05:13:10,807 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-22 05:13:10,807 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-22 05:13:10,807 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-22 05:13:10,807 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-22 05:13:10,807 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-22 05:13:10,807 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-22 05:13:10,807 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-22 05:13:10,807 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-22 05:13:10,807 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-22 05:13:10,808 [INFO] INFO: Object Definition:
2022-04-22 05:13:10,808 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-22 05:13:10,808 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-22 05:13:10,808 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-22 05:13:10,808 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-22 05:13:10,808 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-22 05:13:10,808 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-22 05:13:10,808 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-22 05:13:10,809 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-22 05:13:10,809 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-22 05:13:10,809 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-22 05:13:10,809 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-22 05:13:10,809 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-22 05:14:21,381 [INFO] INFO: Configuration initialized!
2022-04-22 05:14:21,381 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-22 05:14:21,381 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-22 05:14:22,126 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-22 05:14:22,126 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-22 05:14:22,126 [INFO] INFO: Variable Definition:
2022-04-22 05:14:22,126 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-22 05:14:22,126 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-22 05:14:22,127 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-22 05:14:22,127 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-22 05:14:22,127 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-22 05:14:22,127 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-22 05:14:22,127 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-22 05:14:22,127 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-22 05:14:22,127 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-22 05:14:22,127 [INFO] INFO: Object Definition:
2022-04-22 05:14:22,127 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-22 05:14:22,127 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-22 05:14:22,128 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-22 05:14:22,128 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-22 05:14:22,128 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-22 05:14:22,128 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-22 05:14:22,128 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-22 05:14:22,128 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-22 05:14:22,128 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-22 05:14:22,128 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-22 05:14:22,128 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-22 05:14:22,129 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-26 16:43:20,880 [INFO] INFO: Configuration initialized!
2022-04-26 16:43:20,881 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-26 16:43:20,881 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-26 16:43:21,795 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-26 16:43:21,795 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-26 16:43:21,796 [INFO] INFO: Variable Definition:
2022-04-26 16:43:21,796 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-26 16:43:21,796 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-26 16:43:21,796 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-26 16:43:21,796 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-26 16:43:21,797 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-26 16:43:21,797 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-26 16:43:21,797 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-26 16:43:21,797 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-26 16:43:21,797 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-26 16:43:21,797 [INFO] INFO: Object Definition:
2022-04-26 16:43:21,798 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-26 16:43:21,798 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-26 16:43:21,798 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-26 16:43:21,798 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-26 16:43:21,798 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-26 16:43:21,798 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-26 16:43:21,799 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-26 16:43:21,799 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-26 16:43:21,799 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-26 16:43:21,799 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-26 16:43:21,799 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-26 16:43:21,800 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-26 16:43:57,707 [INFO] INFO: Configuration initialized!
2022-04-26 16:43:57,707 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-26 16:43:57,707 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-26 16:43:58,510 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-26 16:43:58,510 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-26 16:43:58,510 [INFO] INFO: Variable Definition:
2022-04-26 16:43:58,511 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-26 16:43:58,511 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-26 16:43:58,511 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-26 16:43:58,511 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-26 16:43:58,511 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-26 16:43:58,511 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-26 16:43:58,512 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-26 16:43:58,512 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-26 16:43:58,512 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-26 16:43:58,512 [INFO] INFO: Object Definition:
2022-04-26 16:43:58,512 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-26 16:43:58,513 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-26 16:43:58,513 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-26 16:43:58,513 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-26 16:43:58,514 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-26 16:43:58,514 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-26 16:43:58,514 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-26 16:43:58,514 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-26 16:43:58,514 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-26 16:43:58,515 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-26 16:43:58,515 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-26 16:43:58,515 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-26 16:44:34,253 [INFO] INFO: Configuration initialized!
2022-04-26 16:44:34,253 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-26 16:44:34,253 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-26 16:44:35,028 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-26 16:44:35,029 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-26 16:44:35,029 [INFO] INFO: Variable Definition:
2022-04-26 16:44:35,029 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-26 16:44:35,029 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-26 16:44:35,030 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-26 16:44:35,030 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-26 16:44:35,030 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-26 16:44:35,030 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-26 16:44:35,031 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-26 16:44:35,031 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-26 16:44:35,031 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-26 16:44:35,031 [INFO] INFO: Object Definition:
2022-04-26 16:44:35,031 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-26 16:44:35,032 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-26 16:44:35,032 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-26 16:44:35,032 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-26 16:44:35,032 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-26 16:44:35,032 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-26 16:44:35,033 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-26 16:44:35,033 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-26 16:44:35,033 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-26 16:44:35,033 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-26 16:44:35,034 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-26 16:44:35,034 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-26 16:45:01,352 [INFO] INFO: Configuration initialized!
2022-04-26 16:45:01,352 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-26 16:45:01,352 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-26 16:45:02,128 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-26 16:45:02,128 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-26 16:45:02,129 [INFO] INFO: Variable Definition:
2022-04-26 16:45:02,129 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-26 16:45:02,129 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-26 16:45:02,129 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-26 16:45:02,129 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-26 16:45:02,129 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-26 16:45:02,129 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-26 16:45:02,130 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-26 16:45:02,130 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-26 16:45:02,130 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-26 16:45:02,130 [INFO] INFO: Object Definition:
2022-04-26 16:45:02,130 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-26 16:45:02,130 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-26 16:45:02,130 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-26 16:45:02,131 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-26 16:45:02,131 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-26 16:45:02,131 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-26 16:45:02,131 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-26 16:45:02,131 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-26 16:45:02,132 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-26 16:45:02,132 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-26 16:45:02,132 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-26 16:45:02,132 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-04-26 16:45:27,067 [INFO] INFO: Configuration initialized!
2022-04-26 16:45:27,067 [MODEL] INFO: Setting Vggtiny_backbone!
2022-04-26 16:45:27,067 [MODEL] INFO: Enable model backbone pretraining:False
2022-04-26 16:45:27,826 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-04-26 16:45:27,826 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-04-26 16:45:27,827 [INFO] INFO: Variable Definition:
2022-04-26 16:45:27,827 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-04-26 16:45:27,827 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-04-26 16:45:27,827 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-04-26 16:45:27,827 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-04-26 16:45:27,828 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-04-26 16:45:27,828 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-04-26 16:45:27,828 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-04-26 16:45:27,828 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-04-26 16:45:27,828 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-04-26 16:45:27,829 [INFO] INFO: Object Definition:
2022-04-26 16:45:27,829 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-04-26 16:45:27,829 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-04-26 16:45:27,829 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-04-26 16:45:27,830 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-04-26 16:45:27,830 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-04-26 16:45:27,830 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-04-26 16:45:27,830 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-04-26 16:45:27,831 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-04-26 16:45:27,831 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-04-26 16:45:27,831 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-04-26 16:45:27,831 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-04-26 16:45:27,831 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:27:05,657 [INFO] INFO: Configuration initialized!
2022-05-04 22:27:05,658 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:27:05,658 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:27:06,621 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:27:06,622 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:27:06,623 [INFO] INFO: Variable Definition:
2022-05-04 22:27:06,624 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:27:06,625 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:27:06,626 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:27:06,627 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:27:06,629 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:27:06,630 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:27:06,632 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:27:06,633 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:27:06,634 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:27:06,636 [INFO] INFO: Object Definition:
2022-05-04 22:27:06,637 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:27:06,638 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:27:06,648 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:27:06,649 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:27:06,649 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:27:06,649 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:27:06,649 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:27:06,650 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:27:06,650 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:27:06,650 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:27:06,651 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:27:06,651 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:27:29,508 [INFO] INFO: Configuration initialized!
2022-05-04 22:27:29,508 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:27:29,508 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:27:30,444 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:27:30,444 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:27:30,445 [INFO] INFO: Variable Definition:
2022-05-04 22:27:30,445 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:27:30,445 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:27:30,445 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:27:30,445 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:27:30,446 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:27:30,446 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:27:30,446 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:27:30,446 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:27:30,446 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:27:30,446 [INFO] INFO: Object Definition:
2022-05-04 22:27:30,447 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:27:30,447 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:27:30,447 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:27:30,447 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:27:30,447 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:27:30,447 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:27:30,448 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:27:30,448 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:27:30,448 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:27:30,448 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:27:30,448 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:27:30,448 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:28:19,696 [INFO] INFO: Configuration initialized!
2022-05-04 22:28:19,696 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:28:19,696 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:28:20,498 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:28:20,498 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:28:20,498 [INFO] INFO: Variable Definition:
2022-05-04 22:28:20,498 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:28:20,498 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:28:20,499 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:28:20,499 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:28:20,499 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:28:20,499 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:28:20,499 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:28:20,499 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:28:20,500 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:28:20,500 [INFO] INFO: Object Definition:
2022-05-04 22:28:20,500 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:28:20,500 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:28:20,500 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:28:20,500 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:28:20,501 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:28:20,501 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:28:20,501 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:28:20,501 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:28:20,501 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:28:20,501 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:28:20,502 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:28:20,502 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:29:05,631 [INFO] INFO: Configuration initialized!
2022-05-04 22:29:05,631 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:29:05,631 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:29:06,415 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:29:06,415 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:29:06,415 [INFO] INFO: Variable Definition:
2022-05-04 22:29:06,415 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:29:06,416 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:29:06,416 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:29:06,416 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:29:06,416 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:29:06,416 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:29:06,417 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:29:06,417 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:29:06,417 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:29:06,417 [INFO] INFO: Object Definition:
2022-05-04 22:29:06,417 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:29:06,417 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:29:06,418 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:29:06,418 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:29:06,418 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:29:06,418 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:29:06,418 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:29:06,419 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:29:06,419 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:29:06,419 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:29:06,419 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:29:06,419 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:29:32,836 [INFO] INFO: Configuration initialized!
2022-05-04 22:29:32,836 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:29:32,836 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:29:33,660 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:29:33,660 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:29:33,660 [INFO] INFO: Variable Definition:
2022-05-04 22:29:33,660 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:29:33,660 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:29:33,661 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:29:33,661 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:29:33,661 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:29:33,661 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:29:33,661 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:29:33,661 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:29:33,661 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:29:33,662 [INFO] INFO: Object Definition:
2022-05-04 22:29:33,662 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:29:33,662 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:29:33,662 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:29:33,662 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:29:33,662 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:29:33,663 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:29:33,663 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:29:33,663 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:29:33,663 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:29:33,663 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:29:33,663 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:29:33,664 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:31:04,407 [INFO] INFO: Configuration initialized!
2022-05-04 22:31:04,407 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:31:04,407 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:31:05,194 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:31:05,195 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:31:05,195 [INFO] INFO: Variable Definition:
2022-05-04 22:31:05,195 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:31:05,195 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:31:05,195 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:31:05,195 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:31:05,195 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:31:05,196 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:31:05,196 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:31:05,196 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:31:05,196 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:31:05,196 [INFO] INFO: Object Definition:
2022-05-04 22:31:05,196 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:31:05,196 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:31:05,197 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:31:05,197 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:31:05,197 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:31:05,197 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:31:05,197 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:31:05,197 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:31:05,198 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:31:05,198 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:31:05,198 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:31:05,198 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:31:37,477 [INFO] INFO: Configuration initialized!
2022-05-04 22:31:37,477 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:31:37,477 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:31:38,347 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:31:38,347 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:31:38,347 [INFO] INFO: Variable Definition:
2022-05-04 22:31:38,347 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:31:38,347 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:31:38,347 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:31:38,348 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:31:38,348 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:31:38,348 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:31:38,348 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:31:38,348 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:31:38,348 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:31:38,349 [INFO] INFO: Object Definition:
2022-05-04 22:31:38,349 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:31:38,349 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:31:38,349 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:31:38,349 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:31:38,349 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:31:38,350 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:31:38,350 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:31:38,350 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:31:38,350 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:31:38,350 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:31:38,351 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:31:38,351 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:32:47,020 [INFO] INFO: Configuration initialized!
2022-05-04 22:32:47,020 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:32:47,021 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:32:47,822 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:32:47,822 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:32:47,822 [INFO] INFO: Variable Definition:
2022-05-04 22:32:47,822 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:32:47,822 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:32:47,823 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:32:47,823 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:32:47,823 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:32:47,823 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:32:47,823 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:32:47,823 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:32:47,824 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:32:47,824 [INFO] INFO: Object Definition:
2022-05-04 22:32:47,824 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:32:47,824 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:32:47,824 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:32:47,824 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:32:47,825 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:32:47,825 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:32:47,825 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:32:47,825 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:32:47,825 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:32:47,826 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:32:47,826 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:32:47,826 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:34:49,979 [INFO] INFO: Configuration initialized!
2022-05-04 22:34:49,980 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:34:49,980 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:34:50,789 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:34:50,789 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:34:50,789 [INFO] INFO: Variable Definition:
2022-05-04 22:34:50,789 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:34:50,789 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:34:50,790 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:34:50,790 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:34:50,790 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:34:50,790 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:34:50,790 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:34:50,790 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:34:50,791 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:34:50,791 [INFO] INFO: Object Definition:
2022-05-04 22:34:50,791 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:34:50,791 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:34:50,791 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:34:50,791 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:34:50,792 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:34:50,792 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:34:50,792 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:34:50,792 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:34:50,792 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:34:50,792 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:34:50,793 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:34:50,793 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:35:48,262 [INFO] INFO: Configuration initialized!
2022-05-04 22:35:48,263 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:35:48,263 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:35:49,093 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:35:49,093 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:35:49,093 [INFO] INFO: Variable Definition:
2022-05-04 22:35:49,094 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:35:49,094 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:35:49,094 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:35:49,094 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:35:49,094 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:35:49,095 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:35:49,095 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:35:49,095 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:35:49,095 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:35:49,096 [INFO] INFO: Object Definition:
2022-05-04 22:35:49,096 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:35:49,096 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:35:49,097 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:35:49,097 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:35:49,097 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:35:49,097 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:35:49,098 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:35:49,098 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:35:49,098 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:35:49,098 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:35:49,098 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:35:49,098 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:37:38,513 [INFO] INFO: Configuration initialized!
2022-05-04 22:37:38,514 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:37:38,514 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:37:39,396 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:37:39,396 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:37:39,397 [INFO] INFO: Variable Definition:
2022-05-04 22:37:39,397 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:37:39,397 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:37:39,397 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:37:39,398 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:37:39,398 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:37:39,398 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:37:39,398 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:37:39,398 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:37:39,398 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:37:39,399 [INFO] INFO: Object Definition:
2022-05-04 22:37:39,399 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:37:39,399 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:37:39,399 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:37:39,399 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:37:39,399 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:37:39,399 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:37:39,400 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:37:39,400 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:37:39,400 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:37:39,400 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:37:39,400 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:37:39,401 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:38:37,511 [INFO] INFO: Configuration initialized!
2022-05-04 22:38:37,511 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:38:37,517 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:38:38,332 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:38:38,333 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:38:38,333 [INFO] INFO: Variable Definition:
2022-05-04 22:38:38,333 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:38:38,333 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:38:38,334 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:38:38,334 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:38:38,334 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:38:38,334 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:38:38,334 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:38:38,334 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:38:38,335 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:38:38,335 [INFO] INFO: Object Definition:
2022-05-04 22:38:38,335 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:38:38,335 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:38:38,335 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:38:38,336 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:38:38,336 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:38:38,336 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:38:38,336 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:38:38,336 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:38:38,336 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:38:38,337 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:38:38,337 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:38:38,337 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-04 22:41:11,583 [INFO] INFO: Configuration initialized!
2022-05-04 22:41:11,583 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-04 22:41:11,583 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-04 22:41:12,347 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-04 22:41:12,347 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-04 22:41:12,354 [INFO] INFO: Variable Definition:
2022-05-04 22:41:12,354 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-04 22:41:12,354 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-04 22:41:12,354 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-04 22:41:12,354 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-04 22:41:12,355 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-04 22:41:12,355 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-04 22:41:12,355 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-04 22:41:12,355 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-04 22:41:12,355 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-04 22:41:12,355 [INFO] INFO: Object Definition:
2022-05-04 22:41:12,355 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-04 22:41:12,355 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-04 22:41:12,356 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-04 22:41:12,356 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-04 22:41:12,356 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-04 22:41:12,356 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-04 22:41:12,356 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-04 22:41:12,356 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-04 22:41:12,357 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-04 22:41:12,357 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-04 22:41:12,357 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-04 22:41:12,357 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:16:32,647 [INFO] INFO: Configuration initialized!
2022-05-05 00:16:32,647 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:16:32,648 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:16:33,748 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:16:33,748 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:16:33,748 [INFO] INFO: Variable Definition:
2022-05-05 00:16:33,749 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:16:33,749 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:16:33,749 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:16:33,749 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:16:33,750 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:16:33,750 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:16:33,750 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:16:33,751 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:16:33,751 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:16:33,752 [INFO] INFO: Object Definition:
2022-05-05 00:16:33,752 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:16:33,752 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:16:33,752 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:16:33,752 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:16:33,753 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:16:33,753 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:16:33,753 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:16:33,753 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:16:33,753 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:16:33,754 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:16:33,754 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:16:33,754 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:17:25,575 [INFO] INFO: Configuration initialized!
2022-05-05 00:17:25,575 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:17:25,575 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:17:26,381 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:17:26,382 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:17:26,382 [INFO] INFO: Variable Definition:
2022-05-05 00:17:26,382 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:17:26,382 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:17:26,382 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:17:26,383 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:17:26,383 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:17:26,383 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:17:26,383 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:17:26,383 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:17:26,384 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:17:26,384 [INFO] INFO: Object Definition:
2022-05-05 00:17:26,384 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:17:26,384 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:17:26,385 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:17:26,385 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:17:26,385 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:17:26,385 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:17:26,386 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:17:26,386 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:17:26,386 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:17:26,386 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:17:26,386 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:17:26,387 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:17:50,962 [INFO] INFO: Configuration initialized!
2022-05-05 00:17:50,962 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:17:50,962 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:17:51,767 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:17:51,767 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:17:51,768 [INFO] INFO: Variable Definition:
2022-05-05 00:17:51,768 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:17:51,768 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:17:51,769 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:17:51,769 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:17:51,769 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:17:51,769 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:17:51,770 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:17:51,770 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:17:51,770 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:17:51,770 [INFO] INFO: Object Definition:
2022-05-05 00:17:51,771 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:17:51,771 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:17:51,771 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:17:51,771 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:17:51,771 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:17:51,772 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:17:51,772 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:17:51,772 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:17:51,772 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:17:51,773 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:17:51,773 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:17:51,773 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:27:21,033 [INFO] INFO: Configuration initialized!
2022-05-05 00:27:21,033 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:27:21,033 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:27:21,845 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:27:21,845 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:27:21,845 [INFO] INFO: Variable Definition:
2022-05-05 00:27:21,846 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:27:21,846 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:27:21,846 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:27:21,846 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:27:21,846 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:27:21,847 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:27:21,847 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:27:21,847 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:27:21,847 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:27:21,848 [INFO] INFO: Object Definition:
2022-05-05 00:27:21,848 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:27:21,848 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:27:21,849 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:27:21,849 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:27:21,849 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:27:21,850 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:27:21,850 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:27:21,850 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:27:21,850 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:27:21,851 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:27:21,851 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:27:21,851 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:28:34,623 [INFO] INFO: Configuration initialized!
2022-05-05 00:28:34,623 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:28:34,623 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:28:35,545 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:28:35,546 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:28:35,546 [INFO] INFO: Variable Definition:
2022-05-05 00:28:35,546 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:28:35,547 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:28:35,547 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:28:35,547 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:28:35,548 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:28:35,548 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:28:35,548 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:28:35,548 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:28:35,549 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:28:35,549 [INFO] INFO: Object Definition:
2022-05-05 00:28:35,549 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:28:35,550 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:28:35,550 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:28:35,550 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:28:35,551 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:28:35,551 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:28:35,551 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:28:35,552 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:28:35,552 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:28:35,553 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:28:35,553 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:28:35,553 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:30:25,438 [INFO] INFO: Configuration initialized!
2022-05-05 00:30:25,438 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:30:25,438 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:30:26,221 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:30:26,221 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:30:26,227 [INFO] INFO: Variable Definition:
2022-05-05 00:30:26,228 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:30:26,228 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:30:26,228 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:30:26,228 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:30:26,229 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:30:26,229 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:30:26,229 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:30:26,229 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:30:26,229 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:30:26,229 [INFO] INFO: Object Definition:
2022-05-05 00:30:26,230 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:30:26,230 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:30:26,230 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:30:26,230 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:30:26,230 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:30:26,230 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:30:26,230 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:30:26,230 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:30:26,231 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:30:26,231 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:30:26,231 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:30:26,231 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:32:13,568 [INFO] INFO: Configuration initialized!
2022-05-05 00:32:13,568 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:32:13,574 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:32:14,389 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:32:14,389 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:32:14,390 [INFO] INFO: Variable Definition:
2022-05-05 00:32:14,390 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:32:14,390 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:32:14,390 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:32:14,391 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:32:14,391 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:32:14,391 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:32:14,391 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:32:14,391 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:32:14,392 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:32:14,392 [INFO] INFO: Object Definition:
2022-05-05 00:32:14,392 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:32:14,392 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:32:14,392 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:32:14,393 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:32:14,393 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:32:14,393 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:32:14,393 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:32:14,394 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:32:14,394 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:32:14,394 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:32:14,394 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:32:14,394 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:32:25,538 [INFO] INFO: Configuration initialized!
2022-05-05 00:32:25,539 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:32:25,539 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:32:26,366 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:32:26,366 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:32:26,367 [INFO] INFO: Variable Definition:
2022-05-05 00:32:26,367 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:32:26,367 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:32:26,368 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:32:26,368 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:32:26,368 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:32:26,368 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:32:26,368 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:32:26,369 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:32:26,369 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:32:26,369 [INFO] INFO: Object Definition:
2022-05-05 00:32:26,369 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:32:26,369 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:32:26,370 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:32:26,370 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:32:26,370 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:32:26,370 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:32:26,370 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:32:26,371 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:32:26,371 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:32:26,371 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:32:26,371 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:32:26,371 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:32:47,262 [INFO] INFO: Configuration initialized!
2022-05-05 00:32:47,262 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:32:47,262 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:32:48,091 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:32:48,091 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:32:48,091 [INFO] INFO: Variable Definition:
2022-05-05 00:32:48,092 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:32:48,092 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:32:48,092 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:32:48,092 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:32:48,092 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:32:48,092 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:32:48,093 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:32:48,093 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:32:48,093 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:32:48,093 [INFO] INFO: Object Definition:
2022-05-05 00:32:48,094 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:32:48,094 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:32:48,094 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:32:48,095 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:32:48,095 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:32:48,095 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:32:48,096 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:32:48,096 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:32:48,096 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:32:48,096 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:32:48,097 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:32:48,097 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:33:35,147 [INFO] INFO: Configuration initialized!
2022-05-05 00:33:35,147 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:33:35,147 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:33:35,915 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:33:35,915 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:33:35,915 [INFO] INFO: Variable Definition:
2022-05-05 00:33:35,915 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:33:35,916 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:33:35,916 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:33:35,916 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:33:35,916 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:33:35,916 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:33:35,916 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:33:35,916 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:33:35,917 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:33:35,917 [INFO] INFO: Object Definition:
2022-05-05 00:33:35,917 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:33:35,917 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:33:35,917 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:33:35,917 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:33:35,918 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:33:35,918 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:33:35,918 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:33:35,918 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:33:35,918 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:33:35,919 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:33:35,919 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:33:35,919 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:36:01,296 [INFO] INFO: Configuration initialized!
2022-05-05 00:36:01,296 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:36:01,297 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:36:02,113 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:36:02,114 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:36:02,114 [INFO] INFO: Variable Definition:
2022-05-05 00:36:02,114 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:36:02,114 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:36:02,115 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:36:02,115 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:36:02,115 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:36:02,115 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:36:02,115 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:36:02,116 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:36:02,116 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:36:02,116 [INFO] INFO: Object Definition:
2022-05-05 00:36:02,116 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:36:02,117 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:36:02,117 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:36:02,117 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:36:02,117 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:36:02,117 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:36:02,118 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:36:02,118 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:36:02,118 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:36:02,118 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:36:02,118 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:36:02,119 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:36:25,388 [INFO] INFO: Configuration initialized!
2022-05-05 00:36:25,388 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:36:25,388 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:36:26,187 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:36:26,187 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:36:26,187 [INFO] INFO: Variable Definition:
2022-05-05 00:36:26,187 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:36:26,187 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:36:26,188 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:36:26,188 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:36:26,188 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:36:26,188 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:36:26,188 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:36:26,188 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:36:26,188 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:36:26,188 [INFO] INFO: Object Definition:
2022-05-05 00:36:26,188 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:36:26,188 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:36:26,189 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:36:26,189 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:36:26,189 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:36:26,189 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:36:26,189 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:36:26,189 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:36:26,190 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:36:26,190 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:36:26,190 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:36:26,190 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:37:09,752 [INFO] INFO: Configuration initialized!
2022-05-05 00:37:09,752 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:37:09,752 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:37:10,511 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:37:10,511 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:37:10,511 [INFO] INFO: Variable Definition:
2022-05-05 00:37:10,512 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:37:10,512 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:37:10,512 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:37:10,512 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:37:10,512 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:37:10,512 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:37:10,513 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:37:10,513 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:37:10,513 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:37:10,513 [INFO] INFO: Object Definition:
2022-05-05 00:37:10,513 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:37:10,513 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:37:10,514 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:37:10,514 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:37:10,514 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:37:10,514 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:37:10,514 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:37:10,515 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:37:10,515 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:37:10,515 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:37:10,515 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:37:10,515 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 00:37:58,424 [INFO] INFO: Configuration initialized!
2022-05-05 00:37:58,424 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 00:37:58,424 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 00:37:59,188 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 00:37:59,188 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 00:37:59,189 [INFO] INFO: Variable Definition:
2022-05-05 00:37:59,189 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 00:37:59,189 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 00:37:59,189 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 00:37:59,189 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 00:37:59,189 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 00:37:59,189 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 00:37:59,190 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 00:37:59,190 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 00:37:59,190 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 00:37:59,190 [INFO] INFO: Object Definition:
2022-05-05 00:37:59,190 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 00:37:59,190 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 00:37:59,190 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 00:37:59,191 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 00:37:59,191 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 00:37:59,191 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 00:37:59,191 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 00:37:59,191 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 00:37:59,192 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 00:37:59,192 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 00:37:59,192 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 00:37:59,192 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 02:10:48,756 [INFO] INFO: Configuration initialized!
2022-05-05 02:10:48,757 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 02:10:48,757 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 02:10:49,649 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 02:10:49,649 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 02:10:49,649 [INFO] INFO: Variable Definition:
2022-05-05 02:10:49,650 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 02:10:49,650 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 02:10:49,650 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 02:10:49,650 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 02:10:49,650 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 02:10:49,650 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 02:10:49,651 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 02:10:49,651 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 02:10:49,651 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 02:10:49,651 [INFO] INFO: Object Definition:
2022-05-05 02:10:49,651 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 02:10:49,651 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 02:10:49,652 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 02:10:49,652 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 02:10:49,652 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 02:10:49,652 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 02:10:49,652 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 02:10:49,652 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 02:10:49,653 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 02:10:49,653 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 02:10:49,653 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 02:10:49,653 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 12:43:03,009 [INFO] INFO: Configuration initialized!
2022-05-05 12:43:03,009 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 12:43:03,009 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 12:43:03,815 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 12:43:03,815 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 12:43:03,815 [INFO] INFO: Variable Definition:
2022-05-05 12:43:03,815 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 12:43:03,815 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 12:43:03,816 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 12:43:03,816 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 12:43:03,816 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 12:43:03,816 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 12:43:03,816 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 12:43:03,816 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 12:43:03,816 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 12:43:03,817 [INFO] INFO: Object Definition:
2022-05-05 12:43:03,817 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 12:43:03,817 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 12:43:03,817 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 12:43:03,817 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 12:43:03,818 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 12:43:03,818 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 12:43:03,818 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 12:43:03,818 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 12:43:03,818 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 12:43:03,818 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 12:43:03,819 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 12:43:03,819 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 13:04:24,040 [INFO] INFO: Configuration initialized!
2022-05-05 13:04:24,040 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 13:04:24,041 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 13:04:24,967 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 13:04:24,967 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 13:04:24,967 [INFO] INFO: Variable Definition:
2022-05-05 13:04:24,967 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 13:04:24,968 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 13:04:24,968 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 13:04:24,968 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 13:04:24,968 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 13:04:24,969 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 13:04:24,969 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 13:04:24,969 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 13:04:24,969 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 13:04:24,970 [INFO] INFO: Object Definition:
2022-05-05 13:04:24,970 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 13:04:24,970 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 13:04:24,971 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 13:04:24,971 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 13:04:24,971 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 13:04:24,971 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 13:04:24,971 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 13:04:24,972 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 13:04:24,972 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 13:04:24,972 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 13:04:24,972 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 13:04:24,973 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 13:06:47,480 [INFO] INFO: Configuration initialized!
2022-05-05 13:06:47,480 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 13:06:47,480 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 13:06:48,290 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 13:06:48,290 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 13:06:48,290 [INFO] INFO: Variable Definition:
2022-05-05 13:06:48,290 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 13:06:48,291 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 13:06:48,291 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 13:06:48,291 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 13:06:48,291 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 13:06:48,291 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 13:06:48,292 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 13:06:48,292 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 13:06:48,292 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 13:06:48,292 [INFO] INFO: Object Definition:
2022-05-05 13:06:48,293 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 13:06:48,293 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 13:06:48,293 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 13:06:48,293 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 13:06:48,294 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 13:06:48,294 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 13:06:48,294 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 13:06:48,295 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 13:06:48,295 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 13:06:48,295 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 13:06:48,296 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 13:06:48,296 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 13:07:33,512 [INFO] INFO: Configuration initialized!
2022-05-05 13:07:33,512 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 13:07:33,512 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 13:07:34,298 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 13:07:34,299 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 13:07:34,299 [INFO] INFO: Variable Definition:
2022-05-05 13:07:34,299 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 13:07:34,300 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 13:07:34,300 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 13:07:34,300 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 13:07:34,300 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 13:07:34,301 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 13:07:34,301 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 13:07:34,301 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 13:07:34,301 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 13:07:34,301 [INFO] INFO: Object Definition:
2022-05-05 13:07:34,302 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 13:07:34,302 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 13:07:34,302 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 13:07:34,302 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 13:07:34,302 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 13:07:34,303 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 13:07:34,303 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 13:07:34,303 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 13:07:34,303 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 13:07:34,303 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 13:07:34,304 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 13:07:34,304 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 13:08:43,979 [INFO] INFO: Configuration initialized!
2022-05-05 13:08:43,980 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 13:08:43,980 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 13:08:44,912 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 13:08:44,912 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 13:08:44,913 [INFO] INFO: Variable Definition:
2022-05-05 13:08:44,913 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 13:08:44,913 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 13:08:44,913 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 13:08:44,914 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 13:08:44,914 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 13:08:44,914 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 13:08:44,914 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 13:08:44,914 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 13:08:44,915 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 13:08:44,915 [INFO] INFO: Object Definition:
2022-05-05 13:08:44,915 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 13:08:44,915 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 13:08:44,916 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 13:08:44,916 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 13:08:44,916 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 13:08:44,916 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 13:08:44,916 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 13:08:44,917 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 13:08:44,917 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 13:08:44,917 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 13:08:44,917 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 13:08:44,917 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 13:11:00,197 [INFO] INFO: Configuration initialized!
2022-05-05 13:11:00,197 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 13:11:00,197 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 13:11:00,959 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 13:11:00,959 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 13:11:00,960 [INFO] INFO: Variable Definition:
2022-05-05 13:11:00,960 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 13:11:00,961 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 13:11:00,961 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 13:11:00,961 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 13:11:00,961 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 13:11:00,961 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 13:11:00,962 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 13:11:00,962 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 13:11:00,962 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 13:11:00,962 [INFO] INFO: Object Definition:
2022-05-05 13:11:00,962 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 13:11:00,962 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 13:11:00,963 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 13:11:00,963 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 13:11:00,963 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 13:11:00,963 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 13:11:00,963 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 13:11:00,964 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 13:11:00,964 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 13:11:00,964 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 13:11:00,964 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 13:11:00,964 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 13:11:16,672 [INFO] INFO: Configuration initialized!
2022-05-05 13:11:16,673 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 13:11:16,673 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 13:11:17,445 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 13:11:17,445 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 13:11:17,445 [INFO] INFO: Variable Definition:
2022-05-05 13:11:17,445 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 13:11:17,446 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 13:11:17,446 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 13:11:17,446 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 13:11:17,446 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 13:11:17,446 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 13:11:17,447 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 13:11:17,447 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 13:11:17,447 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 13:11:17,447 [INFO] INFO: Object Definition:
2022-05-05 13:11:17,447 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 13:11:17,448 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 13:11:17,448 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 13:11:17,448 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 13:11:17,448 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 13:11:17,448 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 13:11:17,449 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 13:11:17,449 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 13:11:17,449 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 13:11:17,449 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 13:11:17,449 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 13:11:17,450 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-05 13:12:24,240 [INFO] INFO: Configuration initialized!
2022-05-05 13:12:24,241 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-05 13:12:24,241 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-05 13:12:25,049 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-05 13:12:25,049 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-05 13:12:25,049 [INFO] INFO: Variable Definition:
2022-05-05 13:12:25,050 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-05 13:12:25,050 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-05 13:12:25,050 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-05 13:12:25,051 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-05 13:12:25,051 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-05 13:12:25,051 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-05 13:12:25,051 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-05 13:12:25,052 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-05 13:12:25,052 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-05 13:12:25,052 [INFO] INFO: Object Definition:
2022-05-05 13:12:25,052 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-05 13:12:25,053 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-05 13:12:25,053 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-05 13:12:25,053 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-05 13:12:25,053 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-05 13:12:25,054 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-05 13:12:25,054 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-05 13:12:25,054 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-05 13:12:25,055 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-05 13:12:25,055 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-05 13:12:25,055 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-05 13:12:25,055 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 17:50:34,754 [INFO] INFO: Configuration initialized!
2022-05-08 17:50:34,755 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 17:50:34,755 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 17:50:35,495 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 17:50:35,495 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 17:50:35,495 [INFO] INFO: Variable Definition:
2022-05-08 17:50:35,495 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 17:50:35,496 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 17:50:35,496 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 17:50:35,496 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 17:50:35,496 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 17:50:35,496 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 17:50:35,496 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 17:50:35,496 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 17:50:35,496 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 17:50:35,496 [INFO] INFO: Object Definition:
2022-05-08 17:50:35,496 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 17:50:35,497 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 17:50:35,497 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 17:50:35,497 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 17:50:35,497 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 17:50:35,497 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 17:50:35,497 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 17:50:35,497 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 17:50:35,497 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 17:50:35,497 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 17:50:35,497 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 17:50:35,498 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:09:47,031 [INFO] INFO: Configuration initialized!
2022-05-08 18:09:47,031 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:09:47,031 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:09:47,727 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:09:47,727 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:09:47,733 [INFO] INFO: Variable Definition:
2022-05-08 18:09:47,734 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:09:47,734 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:09:47,734 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:09:47,734 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:09:47,734 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:09:47,734 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:09:47,734 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:09:47,734 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:09:47,735 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:09:47,735 [INFO] INFO: Object Definition:
2022-05-08 18:09:47,735 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:09:47,735 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:09:47,735 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:09:47,735 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:09:47,735 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:09:47,736 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:09:47,736 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:09:47,736 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:09:47,736 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:09:47,736 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:09:47,736 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:09:47,736 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:10:02,261 [INFO] INFO: Configuration initialized!
2022-05-08 18:10:02,261 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:10:02,261 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:10:03,004 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:10:03,004 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:10:03,004 [INFO] INFO: Variable Definition:
2022-05-08 18:10:03,004 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:10:03,004 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:10:03,005 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:10:03,005 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:10:03,005 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:10:03,005 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:10:03,005 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:10:03,005 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:10:03,005 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:10:03,005 [INFO] INFO: Object Definition:
2022-05-08 18:10:03,005 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:10:03,005 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:10:03,005 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:10:03,005 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:10:03,006 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:10:03,006 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:10:03,006 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:10:03,006 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:10:03,006 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:10:03,006 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:10:03,006 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:10:03,006 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:10:24,070 [INFO] INFO: Configuration initialized!
2022-05-08 18:10:24,071 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:10:24,071 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:10:24,767 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:10:24,767 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:10:24,767 [INFO] INFO: Variable Definition:
2022-05-08 18:10:24,767 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:10:24,767 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:10:24,768 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:10:24,768 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:10:24,768 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:10:24,768 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:10:24,768 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:10:24,768 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:10:24,768 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:10:24,768 [INFO] INFO: Object Definition:
2022-05-08 18:10:24,768 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:10:24,769 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:10:24,769 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:10:24,769 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:10:24,769 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:10:24,769 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:10:24,769 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:10:24,769 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:10:24,769 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:10:24,769 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:10:24,770 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:10:24,770 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:11:33,578 [INFO] INFO: Configuration initialized!
2022-05-08 18:11:33,579 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:11:33,579 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:11:34,309 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:11:34,310 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:11:34,310 [INFO] INFO: Variable Definition:
2022-05-08 18:11:34,310 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:11:34,310 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:11:34,311 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:11:34,311 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:11:34,311 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:11:34,311 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:11:34,311 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:11:34,311 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:11:34,312 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:11:34,312 [INFO] INFO: Object Definition:
2022-05-08 18:11:34,312 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:11:34,312 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:11:34,312 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:11:34,312 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:11:34,313 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:11:34,313 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:11:34,313 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:11:34,313 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:11:34,313 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:11:34,313 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:11:34,313 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:11:34,313 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:12:36,484 [INFO] INFO: Configuration initialized!
2022-05-08 18:12:36,485 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:12:36,485 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:12:37,177 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:12:37,178 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:12:37,178 [INFO] INFO: Variable Definition:
2022-05-08 18:12:37,178 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:12:37,178 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:12:37,178 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:12:37,178 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:12:37,178 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:12:37,178 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:12:37,179 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:12:37,179 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:12:37,179 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:12:37,179 [INFO] INFO: Object Definition:
2022-05-08 18:12:37,179 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:12:37,179 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:12:37,179 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:12:37,180 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:12:37,180 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:12:37,180 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:12:37,180 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:12:37,180 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:12:37,180 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:12:37,180 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:12:37,180 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:12:37,180 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:13:55,415 [INFO] INFO: Configuration initialized!
2022-05-08 18:13:55,415 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:13:55,415 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:13:56,132 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:13:56,132 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:13:56,132 [INFO] INFO: Variable Definition:
2022-05-08 18:13:56,133 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:13:56,133 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:13:56,133 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:13:56,133 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:13:56,133 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:13:56,133 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:13:56,133 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:13:56,133 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:13:56,133 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:13:56,133 [INFO] INFO: Object Definition:
2022-05-08 18:13:56,133 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:13:56,134 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:13:56,134 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:13:56,134 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:13:56,134 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:13:56,134 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:13:56,134 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:13:56,134 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:13:56,134 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:13:56,134 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:13:56,135 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:13:56,135 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:14:12,685 [INFO] INFO: Configuration initialized!
2022-05-08 18:14:12,685 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:14:12,686 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:14:13,375 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:14:13,375 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:14:13,375 [INFO] INFO: Variable Definition:
2022-05-08 18:14:13,375 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:14:13,375 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:14:13,375 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:14:13,375 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:14:13,375 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:14:13,375 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:14:13,376 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:14:13,376 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:14:13,376 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:14:13,376 [INFO] INFO: Object Definition:
2022-05-08 18:14:13,376 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:14:13,376 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:14:13,376 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:14:13,376 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:14:13,376 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:14:13,377 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:14:13,377 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:14:13,377 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:14:13,377 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:14:13,377 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:14:13,377 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:14:13,377 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:14:39,581 [INFO] INFO: Configuration initialized!
2022-05-08 18:14:39,581 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:14:39,587 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:14:40,413 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:14:40,413 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:14:40,414 [INFO] INFO: Variable Definition:
2022-05-08 18:14:40,414 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:14:40,414 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:14:40,414 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:14:40,414 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:14:40,414 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:14:40,414 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:14:40,415 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:14:40,415 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:14:40,415 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:14:40,415 [INFO] INFO: Object Definition:
2022-05-08 18:14:40,415 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:14:40,415 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:14:40,415 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:14:40,415 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:14:40,415 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:14:40,415 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:14:40,416 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:14:40,416 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:14:40,416 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:14:40,416 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:14:40,416 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:14:40,416 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:15:30,123 [INFO] INFO: Configuration initialized!
2022-05-08 18:15:30,123 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:15:30,129 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:15:30,877 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:15:30,877 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:15:30,878 [INFO] INFO: Variable Definition:
2022-05-08 18:15:30,878 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:15:30,878 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:15:30,878 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:15:30,878 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:15:30,878 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:15:30,878 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:15:30,878 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:15:30,879 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:15:30,879 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:15:30,879 [INFO] INFO: Object Definition:
2022-05-08 18:15:30,879 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:15:30,879 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:15:30,879 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:15:30,879 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:15:30,879 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:15:30,880 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:15:30,880 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:15:30,880 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:15:30,880 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:15:30,880 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:15:30,880 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:15:30,880 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:16:06,341 [INFO] INFO: Configuration initialized!
2022-05-08 18:16:06,342 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:16:06,348 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:16:07,048 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:16:07,049 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:16:07,049 [INFO] INFO: Variable Definition:
2022-05-08 18:16:07,049 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:16:07,049 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:16:07,049 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:16:07,049 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:16:07,049 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:16:07,050 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:16:07,050 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:16:07,050 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:16:07,050 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:16:07,050 [INFO] INFO: Object Definition:
2022-05-08 18:16:07,050 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:16:07,050 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:16:07,050 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:16:07,050 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:16:07,051 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:16:07,051 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:16:07,051 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:16:07,051 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:16:07,051 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:16:07,051 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:16:07,051 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:16:07,051 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:16:31,358 [INFO] INFO: Configuration initialized!
2022-05-08 18:16:31,359 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:16:31,359 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:16:32,053 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:16:32,054 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:16:32,054 [INFO] INFO: Variable Definition:
2022-05-08 18:16:32,054 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:16:32,054 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:16:32,054 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:16:32,054 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:16:32,054 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:16:32,055 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:16:32,055 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:16:32,055 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:16:32,055 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:16:32,055 [INFO] INFO: Object Definition:
2022-05-08 18:16:32,055 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:16:32,056 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:16:32,056 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:16:32,056 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:16:32,056 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:16:32,056 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:16:32,056 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:16:32,056 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:16:32,056 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:16:32,057 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:16:32,057 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:16:32,057 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:17:09,362 [INFO] INFO: Configuration initialized!
2022-05-08 18:17:09,362 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:17:09,363 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:17:10,047 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:17:10,047 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:17:10,048 [INFO] INFO: Variable Definition:
2022-05-08 18:17:10,048 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:17:10,048 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:17:10,048 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:17:10,048 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:17:10,048 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:17:10,048 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:17:10,048 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:17:10,048 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:17:10,048 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:17:10,049 [INFO] INFO: Object Definition:
2022-05-08 18:17:10,049 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:17:10,049 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:17:10,049 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:17:10,049 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:17:10,049 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:17:10,049 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:17:10,049 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:17:10,049 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:17:10,049 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:17:10,050 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:17:10,050 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:17:10,050 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:18:00,726 [INFO] INFO: Configuration initialized!
2022-05-08 18:18:00,726 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:18:00,727 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:18:01,424 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:18:01,424 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:18:01,425 [INFO] INFO: Variable Definition:
2022-05-08 18:18:01,425 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:18:01,425 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:18:01,425 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:18:01,425 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:18:01,425 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:18:01,425 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:18:01,425 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:18:01,425 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:18:01,426 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:18:01,426 [INFO] INFO: Object Definition:
2022-05-08 18:18:01,426 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:18:01,426 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:18:01,426 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:18:01,426 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:18:01,426 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:18:01,426 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:18:01,426 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:18:01,426 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:18:01,427 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:18:01,427 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:18:01,427 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:18:01,427 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:18:26,419 [INFO] INFO: Configuration initialized!
2022-05-08 18:18:26,420 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:18:26,426 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:18:27,126 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:18:27,127 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:18:27,127 [INFO] INFO: Variable Definition:
2022-05-08 18:18:27,127 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:18:27,127 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:18:27,127 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:18:27,127 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:18:27,127 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:18:27,127 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:18:27,128 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:18:27,128 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:18:27,128 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:18:27,128 [INFO] INFO: Object Definition:
2022-05-08 18:18:27,128 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:18:27,128 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:18:27,128 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:18:27,128 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:18:27,128 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:18:27,129 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:18:27,129 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:18:27,129 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:18:27,129 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:18:27,129 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:18:27,129 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:18:27,129 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:18:55,288 [INFO] INFO: Configuration initialized!
2022-05-08 18:18:55,288 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:18:55,288 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:18:55,971 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:18:55,971 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:18:55,972 [INFO] INFO: Variable Definition:
2022-05-08 18:18:55,972 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:18:55,972 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:18:55,972 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:18:55,972 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:18:55,972 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:18:55,972 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:18:55,972 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:18:55,972 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:18:55,972 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:18:55,972 [INFO] INFO: Object Definition:
2022-05-08 18:18:55,973 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:18:55,973 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:18:55,973 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:18:55,973 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:18:55,973 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:18:55,973 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:18:55,973 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:18:55,973 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:18:55,973 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:18:55,973 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:18:55,973 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:18:55,974 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:19:28,717 [INFO] INFO: Configuration initialized!
2022-05-08 18:19:28,717 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:19:28,717 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:19:29,404 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:19:29,404 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:19:29,404 [INFO] INFO: Variable Definition:
2022-05-08 18:19:29,404 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:19:29,404 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:19:29,404 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:19:29,404 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:19:29,404 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:19:29,405 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:19:29,405 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:19:29,405 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:19:29,405 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:19:29,405 [INFO] INFO: Object Definition:
2022-05-08 18:19:29,405 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:19:29,405 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:19:29,405 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:19:29,405 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:19:29,405 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:19:29,406 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:19:29,406 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:19:29,406 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:19:29,406 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:19:29,406 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:19:29,406 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:19:29,406 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:20:25,316 [INFO] INFO: Configuration initialized!
2022-05-08 18:20:25,316 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:20:25,316 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:20:26,010 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:20:26,011 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:20:26,011 [INFO] INFO: Variable Definition:
2022-05-08 18:20:26,011 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:20:26,011 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:20:26,011 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:20:26,011 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:20:26,011 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:20:26,011 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:20:26,012 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:20:26,012 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:20:26,012 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:20:26,012 [INFO] INFO: Object Definition:
2022-05-08 18:20:26,012 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:20:26,012 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:20:26,012 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:20:26,012 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:20:26,012 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:20:26,013 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:20:26,013 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:20:26,013 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:20:26,013 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:20:26,013 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:20:26,013 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:20:26,013 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:20:51,521 [INFO] INFO: Configuration initialized!
2022-05-08 18:20:51,521 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:20:51,521 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:20:52,228 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:20:52,228 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:20:52,234 [INFO] INFO: Variable Definition:
2022-05-08 18:20:52,235 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:20:52,235 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:20:52,235 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:20:52,235 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:20:52,235 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:20:52,235 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:20:52,235 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:20:52,235 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:20:52,236 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:20:52,236 [INFO] INFO: Object Definition:
2022-05-08 18:20:52,236 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:20:52,236 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:20:52,236 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:20:52,236 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:20:52,236 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:20:52,236 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:20:52,237 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:20:52,237 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:20:52,237 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:20:52,237 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:20:52,237 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:20:52,237 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 18:21:55,865 [INFO] INFO: Configuration initialized!
2022-05-08 18:21:55,865 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 18:21:55,871 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 18:21:56,572 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 18:21:56,572 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 18:21:56,572 [INFO] INFO: Variable Definition:
2022-05-08 18:21:56,573 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 18:21:56,573 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 18:21:56,573 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 18:21:56,573 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 18:21:56,573 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 18:21:56,574 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 18:21:56,574 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 18:21:56,574 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 18:21:56,574 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 18:21:56,574 [INFO] INFO: Object Definition:
2022-05-08 18:21:56,575 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 18:21:56,575 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 18:21:56,575 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 18:21:56,575 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 18:21:56,575 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 18:21:56,575 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 18:21:56,576 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 18:21:56,576 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 18:21:56,576 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 18:21:56,576 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 18:21:56,576 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 18:21:56,576 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 21:49:45,329 [INFO] INFO: Configuration initialized!
2022-05-08 21:49:45,329 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 21:49:45,329 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 21:49:46,286 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 21:49:46,286 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 21:49:46,287 [INFO] INFO: Variable Definition:
2022-05-08 21:49:46,287 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 21:49:46,287 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 21:49:46,287 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 21:49:46,287 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 21:49:46,287 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 21:49:46,287 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 21:49:46,288 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 21:49:46,288 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 21:49:46,288 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 21:49:46,288 [INFO] INFO: Object Definition:
2022-05-08 21:49:46,289 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 21:49:46,289 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 21:49:46,289 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 21:49:46,289 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 21:49:46,290 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 21:49:46,290 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 21:49:46,290 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 21:49:46,290 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 21:49:46,290 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 21:49:46,291 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 21:49:46,291 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 21:49:46,291 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 21:50:09,053 [INFO] INFO: Configuration initialized!
2022-05-08 21:50:09,053 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 21:50:09,053 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 21:50:09,884 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 21:50:09,884 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 21:50:09,884 [INFO] INFO: Variable Definition:
2022-05-08 21:50:09,884 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 21:50:09,885 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 21:50:09,885 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 21:50:09,885 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 21:50:09,885 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 21:50:09,885 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 21:50:09,885 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 21:50:09,886 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 21:50:09,886 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 21:50:09,886 [INFO] INFO: Object Definition:
2022-05-08 21:50:09,886 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 21:50:09,886 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 21:50:09,887 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 21:50:09,887 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 21:50:09,887 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 21:50:09,887 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 21:50:09,887 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 21:50:09,887 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 21:50:09,888 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 21:50:09,888 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 21:50:09,888 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 21:50:09,888 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 21:51:26,341 [INFO] INFO: Configuration initialized!
2022-05-08 21:51:26,342 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 21:51:26,342 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 21:51:27,431 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 21:51:27,431 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 21:51:27,437 [INFO] INFO: Variable Definition:
2022-05-08 21:51:27,438 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 21:51:27,438 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 21:51:27,438 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 21:51:27,438 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 21:51:27,438 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 21:51:27,438 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 21:51:27,439 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 21:51:27,439 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 21:51:27,439 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 21:51:27,439 [INFO] INFO: Object Definition:
2022-05-08 21:51:27,440 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 21:51:27,440 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 21:51:27,440 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 21:51:27,440 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 21:51:27,440 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 21:51:27,441 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 21:51:27,441 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 21:51:27,441 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 21:51:27,441 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 21:51:27,442 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 21:51:27,442 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 21:51:27,442 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 21:51:58,877 [INFO] INFO: Configuration initialized!
2022-05-08 21:51:58,877 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 21:51:58,877 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 21:51:59,722 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 21:51:59,722 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 21:51:59,723 [INFO] INFO: Variable Definition:
2022-05-08 21:51:59,723 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 21:51:59,723 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 21:51:59,723 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 21:51:59,723 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 21:51:59,723 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 21:51:59,723 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 21:51:59,723 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 21:51:59,723 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 21:51:59,724 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 21:51:59,724 [INFO] INFO: Object Definition:
2022-05-08 21:51:59,724 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 21:51:59,724 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 21:51:59,724 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 21:51:59,725 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 21:51:59,725 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 21:51:59,725 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 21:51:59,725 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 21:51:59,725 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 21:51:59,725 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 21:51:59,726 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 21:51:59,726 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 21:51:59,726 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 21:53:14,825 [INFO] INFO: Configuration initialized!
2022-05-08 21:53:14,825 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 21:53:14,826 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 21:53:15,726 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 21:53:15,726 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 21:53:15,726 [INFO] INFO: Variable Definition:
2022-05-08 21:53:15,726 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 21:53:15,726 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 21:53:15,727 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 21:53:15,727 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 21:53:15,727 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 21:53:15,727 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 21:53:15,727 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 21:53:15,728 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 21:53:15,728 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 21:53:15,728 [INFO] INFO: Object Definition:
2022-05-08 21:53:15,728 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 21:53:15,729 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 21:53:15,729 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 21:53:15,729 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 21:53:15,729 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 21:53:15,729 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 21:53:15,729 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 21:53:15,730 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 21:53:15,730 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 21:53:15,730 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 21:53:15,730 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 21:53:15,731 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 21:54:05,307 [INFO] INFO: Configuration initialized!
2022-05-08 21:54:05,307 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 21:54:05,307 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 21:54:06,135 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 21:54:06,136 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 21:54:06,142 [INFO] INFO: Variable Definition:
2022-05-08 21:54:06,142 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 21:54:06,142 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 21:54:06,143 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 21:54:06,143 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 21:54:06,143 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 21:54:06,143 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 21:54:06,143 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 21:54:06,144 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 21:54:06,144 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 21:54:06,144 [INFO] INFO: Object Definition:
2022-05-08 21:54:06,144 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 21:54:06,145 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 21:54:06,145 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 21:54:06,145 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 21:54:06,145 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 21:54:06,145 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 21:54:06,146 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 21:54:06,153 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 21:54:06,154 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 21:54:06,154 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 21:54:06,155 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 21:54:06,155 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 21:55:02,978 [INFO] INFO: Configuration initialized!
2022-05-08 21:55:02,979 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 21:55:02,979 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 21:55:03,883 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 21:55:03,883 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 21:55:03,884 [INFO] INFO: Variable Definition:
2022-05-08 21:55:03,884 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 21:55:03,884 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 21:55:03,885 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 21:55:03,885 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 21:55:03,885 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 21:55:03,885 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 21:55:03,886 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 21:55:03,886 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 21:55:03,886 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 21:55:03,887 [INFO] INFO: Object Definition:
2022-05-08 21:55:03,887 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 21:55:03,887 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 21:55:03,888 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 21:55:03,888 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 21:55:03,888 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 21:55:03,888 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 21:55:03,889 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 21:55:03,889 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 21:55:03,889 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 21:55:03,890 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 21:55:03,890 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 21:55:03,890 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 21:57:23,968 [INFO] INFO: Configuration initialized!
2022-05-08 21:57:23,968 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 21:57:23,969 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 21:57:24,742 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 21:57:24,743 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 21:57:24,743 [INFO] INFO: Variable Definition:
2022-05-08 21:57:24,743 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 21:57:24,743 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 21:57:24,744 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 21:57:24,744 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 21:57:24,744 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 21:57:24,744 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 21:57:24,744 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 21:57:24,745 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 21:57:24,745 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 21:57:24,745 [INFO] INFO: Object Definition:
2022-05-08 21:57:24,745 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 21:57:24,746 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 21:57:24,746 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 21:57:24,746 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 21:57:24,746 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 21:57:24,747 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 21:57:24,747 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 21:57:24,747 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 21:57:24,747 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 21:57:24,748 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 21:57:24,748 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 21:57:24,748 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 22:33:09,342 [INFO] INFO: Configuration initialized!
2022-05-08 22:33:09,343 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 22:33:09,343 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 22:33:10,160 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 22:33:10,160 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 22:33:10,160 [INFO] INFO: Variable Definition:
2022-05-08 22:33:10,160 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 22:33:10,161 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 22:33:10,161 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 22:33:10,161 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 22:33:10,161 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 22:33:10,161 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 22:33:10,162 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 22:33:10,162 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 22:33:10,162 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 22:33:10,162 [INFO] INFO: Object Definition:
2022-05-08 22:33:10,162 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 22:33:10,163 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 22:33:10,163 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 22:33:10,163 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 22:33:10,163 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 22:33:10,163 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 22:33:10,164 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 22:33:10,164 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 22:33:10,164 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 22:33:10,164 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 22:33:10,164 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 22:33:10,164 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-08 22:33:46,298 [INFO] INFO: Configuration initialized!
2022-05-08 22:33:46,298 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-08 22:33:46,298 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-08 22:33:47,067 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-08 22:33:47,067 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-08 22:33:47,068 [INFO] INFO: Variable Definition:
2022-05-08 22:33:47,068 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-08 22:33:47,068 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-08 22:33:47,068 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-08 22:33:47,068 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-08 22:33:47,068 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-08 22:33:47,069 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-08 22:33:47,069 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-08 22:33:47,069 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-08 22:33:47,069 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-08 22:33:47,070 [INFO] INFO: Object Definition:
2022-05-08 22:33:47,070 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-08 22:33:47,070 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-08 22:33:47,070 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-08 22:33:47,070 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-08 22:33:47,070 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-08 22:33:47,071 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-08 22:33:47,071 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-08 22:33:47,071 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-08 22:33:47,071 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-08 22:33:47,071 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-08 22:33:47,072 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-08 22:33:47,072 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 00:26:10,930 [INFO] INFO: Configuration initialized!
2022-05-09 00:26:10,930 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 00:26:10,931 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 00:26:11,864 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 00:26:11,864 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 00:26:11,864 [INFO] INFO: Variable Definition:
2022-05-09 00:26:11,865 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 00:26:11,865 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 00:26:11,865 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 00:26:11,865 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 00:26:11,865 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 00:26:11,865 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 00:26:11,866 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 00:26:11,866 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 00:26:11,866 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 00:26:11,866 [INFO] INFO: Object Definition:
2022-05-09 00:26:11,866 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 00:26:11,866 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 00:26:11,866 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 00:26:11,867 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 00:26:11,867 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 00:26:11,873 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 00:26:11,873 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 00:26:11,873 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 00:26:11,874 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 00:26:11,874 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 00:26:11,874 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 00:26:11,874 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 00:28:26,292 [INFO] INFO: Configuration initialized!
2022-05-09 00:28:26,293 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 00:28:26,293 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 00:28:27,147 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 00:28:27,147 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 00:28:27,147 [INFO] INFO: Variable Definition:
2022-05-09 00:28:27,148 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 00:28:27,148 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 00:28:27,148 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 00:28:27,148 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 00:28:27,148 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 00:28:27,148 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 00:28:27,148 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 00:28:27,149 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 00:28:27,149 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 00:28:27,149 [INFO] INFO: Object Definition:
2022-05-09 00:28:27,149 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 00:28:27,149 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 00:28:27,149 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 00:28:27,149 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 00:28:27,150 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 00:28:27,150 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 00:28:27,150 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 00:28:27,150 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 00:28:27,150 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 00:28:27,151 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 00:28:27,151 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 00:28:27,151 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 00:38:53,501 [INFO] INFO: Configuration initialized!
2022-05-09 00:38:53,501 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 00:38:53,502 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 00:38:54,333 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 00:38:54,334 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 00:38:54,334 [INFO] INFO: Variable Definition:
2022-05-09 00:38:54,334 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 00:38:54,334 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 00:38:54,334 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 00:38:54,335 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 00:38:54,335 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 00:38:54,335 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 00:38:54,335 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 00:38:54,335 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 00:38:54,335 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 00:38:54,336 [INFO] INFO: Object Definition:
2022-05-09 00:38:54,336 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 00:38:54,336 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 00:38:54,336 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 00:38:54,336 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 00:38:54,337 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 00:38:54,337 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 00:38:54,337 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 00:38:54,337 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 00:38:54,337 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 00:38:54,337 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 00:38:54,338 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 00:38:54,338 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 00:39:32,043 [INFO] INFO: Configuration initialized!
2022-05-09 00:39:32,044 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 00:39:32,044 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 00:39:32,849 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 00:39:32,849 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 00:39:32,850 [INFO] INFO: Variable Definition:
2022-05-09 00:39:32,850 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 00:39:32,850 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 00:39:32,850 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 00:39:32,850 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 00:39:32,850 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 00:39:32,851 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 00:39:32,851 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 00:39:32,851 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 00:39:32,851 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 00:39:32,851 [INFO] INFO: Object Definition:
2022-05-09 00:39:32,851 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 00:39:32,851 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 00:39:32,852 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 00:39:32,852 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 00:39:32,852 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 00:39:32,852 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 00:39:32,852 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 00:39:32,852 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 00:39:32,853 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 00:39:32,853 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 00:39:32,853 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 00:39:32,854 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 00:44:35,916 [INFO] INFO: Configuration initialized!
2022-05-09 00:44:35,916 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 00:44:35,916 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 00:44:36,774 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 00:44:36,774 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 00:44:36,780 [INFO] INFO: Variable Definition:
2022-05-09 00:44:36,780 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 00:44:36,781 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 00:44:36,781 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 00:44:36,781 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 00:44:36,781 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 00:44:36,781 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 00:44:36,781 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 00:44:36,781 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 00:44:36,781 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 00:44:36,782 [INFO] INFO: Object Definition:
2022-05-09 00:44:36,782 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 00:44:36,782 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 00:44:36,782 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 00:44:36,782 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 00:44:36,783 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 00:44:36,783 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 00:44:36,783 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 00:44:36,783 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 00:44:36,783 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 00:44:36,783 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 00:44:36,784 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 00:44:36,784 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 00:45:29,006 [INFO] INFO: Configuration initialized!
2022-05-09 00:45:29,006 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 00:45:29,006 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 00:45:30,089 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 00:45:30,089 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 00:45:30,095 [INFO] INFO: Variable Definition:
2022-05-09 00:45:30,096 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 00:45:30,096 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 00:45:30,096 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 00:45:30,097 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 00:45:30,097 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 00:45:30,097 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 00:45:30,097 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 00:45:30,097 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 00:45:30,097 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 00:45:30,097 [INFO] INFO: Object Definition:
2022-05-09 00:45:30,097 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 00:45:30,098 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 00:45:30,098 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 00:45:30,098 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 00:45:30,098 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 00:45:30,098 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 00:45:30,098 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 00:45:30,098 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 00:45:30,098 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 00:45:30,098 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 00:45:30,099 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 00:45:30,099 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 00:46:32,457 [INFO] INFO: Configuration initialized!
2022-05-09 00:46:32,458 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 00:46:32,458 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 00:46:33,364 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 00:46:33,364 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 00:46:33,365 [INFO] INFO: Variable Definition:
2022-05-09 00:46:33,365 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 00:46:33,365 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 00:46:33,365 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 00:46:33,366 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 00:46:33,366 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 00:46:33,366 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 00:46:33,366 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 00:46:33,367 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 00:46:33,367 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 00:46:33,367 [INFO] INFO: Object Definition:
2022-05-09 00:46:33,367 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 00:46:33,368 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 00:46:33,368 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 00:46:33,368 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 00:46:33,368 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 00:46:33,369 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 00:46:33,369 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 00:46:33,369 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 00:46:33,370 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 00:46:33,370 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 00:46:33,370 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 00:46:33,370 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 00:47:14,592 [INFO] INFO: Configuration initialized!
2022-05-09 00:47:14,593 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 00:47:14,593 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 00:47:15,519 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 00:47:15,519 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 00:47:15,519 [INFO] INFO: Variable Definition:
2022-05-09 00:47:15,519 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 00:47:15,519 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 00:47:15,520 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 00:47:15,520 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 00:47:15,520 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 00:47:15,520 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 00:47:15,520 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 00:47:15,520 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 00:47:15,520 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 00:47:15,521 [INFO] INFO: Object Definition:
2022-05-09 00:47:15,521 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 00:47:15,521 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 00:47:15,521 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 00:47:15,521 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 00:47:15,521 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 00:47:15,521 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 00:47:15,522 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 00:47:15,522 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 00:47:15,522 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 00:47:15,522 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 00:47:15,522 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 00:47:15,522 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 00:48:31,123 [INFO] INFO: Configuration initialized!
2022-05-09 00:48:31,123 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 00:48:31,124 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 00:48:31,989 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 00:48:31,989 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 00:48:31,989 [INFO] INFO: Variable Definition:
2022-05-09 00:48:31,989 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 00:48:31,989 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 00:48:31,989 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 00:48:31,990 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 00:48:31,990 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 00:48:31,990 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 00:48:31,990 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 00:48:31,990 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 00:48:31,990 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 00:48:31,990 [INFO] INFO: Object Definition:
2022-05-09 00:48:31,991 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 00:48:31,991 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 00:48:31,991 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 00:48:31,991 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 00:48:31,991 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 00:48:31,991 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 00:48:31,992 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 00:48:31,992 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 00:48:31,992 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 00:48:31,992 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 00:48:31,992 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 00:48:31,992 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:15:35,826 [INFO] INFO: Configuration initialized!
2022-05-09 01:15:35,826 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:15:35,827 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:15:36,654 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:15:36,654 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:15:36,654 [INFO] INFO: Variable Definition:
2022-05-09 01:15:36,654 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:15:36,654 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:15:36,655 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:15:36,655 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:15:36,655 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:15:36,655 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:15:36,655 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:15:36,656 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:15:36,656 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:15:36,656 [INFO] INFO: Object Definition:
2022-05-09 01:15:36,656 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:15:36,656 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:15:36,657 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:15:36,657 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:15:36,657 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:15:36,657 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:15:36,658 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:15:36,658 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:15:36,658 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:15:36,658 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:15:36,659 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:15:36,659 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:17:57,219 [INFO] INFO: Configuration initialized!
2022-05-09 01:17:57,220 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:17:57,222 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:17:58,061 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:17:58,062 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:17:58,062 [INFO] INFO: Variable Definition:
2022-05-09 01:17:58,062 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:17:58,062 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:17:58,062 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:17:58,062 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:17:58,063 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:17:58,063 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:17:58,063 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:17:58,063 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:17:58,063 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:17:58,063 [INFO] INFO: Object Definition:
2022-05-09 01:17:58,064 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:17:58,064 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:17:58,064 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:17:58,064 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:17:58,064 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:17:58,064 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:17:58,065 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:17:58,065 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:17:58,065 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:17:58,065 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:17:58,066 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:17:58,066 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:20:07,891 [INFO] INFO: Configuration initialized!
2022-05-09 01:20:07,892 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:20:07,892 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:20:08,731 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:20:08,731 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:20:08,731 [INFO] INFO: Variable Definition:
2022-05-09 01:20:08,731 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:20:08,731 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:20:08,731 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:20:08,732 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:20:08,732 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:20:08,732 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:20:08,732 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:20:08,732 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:20:08,732 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:20:08,733 [INFO] INFO: Object Definition:
2022-05-09 01:20:08,733 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:20:08,733 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:20:08,733 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:20:08,733 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:20:08,733 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:20:08,734 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:20:08,734 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:20:08,734 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:20:08,734 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:20:08,734 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:20:08,734 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:20:08,735 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:20:50,035 [INFO] INFO: Configuration initialized!
2022-05-09 01:20:50,035 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:20:50,035 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:20:50,962 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:20:50,962 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:20:50,963 [INFO] INFO: Variable Definition:
2022-05-09 01:20:50,963 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:20:50,963 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:20:50,963 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:20:50,963 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:20:50,963 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:20:50,963 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:20:50,964 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:20:50,964 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:20:50,964 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:20:50,964 [INFO] INFO: Object Definition:
2022-05-09 01:20:50,964 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:20:50,964 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:20:50,964 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:20:50,965 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:20:50,965 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:20:50,965 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:20:50,965 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:20:50,965 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:20:50,965 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:20:50,965 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:20:50,966 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:20:50,966 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:21:10,774 [INFO] INFO: Configuration initialized!
2022-05-09 01:21:10,775 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:21:10,775 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:21:11,673 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:21:11,673 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:21:11,673 [INFO] INFO: Variable Definition:
2022-05-09 01:21:11,673 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:21:11,674 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:21:11,674 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:21:11,674 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:21:11,674 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:21:11,674 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:21:11,674 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:21:11,674 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:21:11,675 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:21:11,675 [INFO] INFO: Object Definition:
2022-05-09 01:21:11,675 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:21:11,675 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:21:11,675 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:21:11,675 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:21:11,676 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:21:11,676 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:21:11,676 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:21:11,676 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:21:11,676 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:21:11,676 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:21:11,676 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:21:11,677 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:22:12,599 [INFO] INFO: Configuration initialized!
2022-05-09 01:22:12,599 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:22:12,599 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:22:13,497 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:22:13,498 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:22:13,498 [INFO] INFO: Variable Definition:
2022-05-09 01:22:13,498 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:22:13,498 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:22:13,498 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:22:13,498 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:22:13,499 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:22:13,499 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:22:13,499 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:22:13,499 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:22:13,499 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:22:13,499 [INFO] INFO: Object Definition:
2022-05-09 01:22:13,499 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:22:13,500 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:22:13,500 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:22:13,500 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:22:13,500 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:22:13,500 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:22:13,500 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:22:13,500 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:22:13,501 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:22:13,501 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:22:13,501 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:22:13,501 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:23:09,586 [INFO] INFO: Configuration initialized!
2022-05-09 01:23:09,586 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:23:09,586 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:23:10,539 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:23:10,539 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:23:10,539 [INFO] INFO: Variable Definition:
2022-05-09 01:23:10,540 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:23:10,540 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:23:10,540 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:23:10,540 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:23:10,540 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:23:10,541 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:23:10,541 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:23:10,541 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:23:10,541 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:23:10,541 [INFO] INFO: Object Definition:
2022-05-09 01:23:10,541 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:23:10,542 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:23:10,542 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:23:10,542 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:23:10,542 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:23:10,542 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:23:10,542 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:23:10,543 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:23:10,543 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:23:10,543 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:23:10,543 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:23:10,543 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:23:39,516 [INFO] INFO: Configuration initialized!
2022-05-09 01:23:39,516 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:23:39,517 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:23:40,325 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:23:40,326 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:23:40,326 [INFO] INFO: Variable Definition:
2022-05-09 01:23:40,326 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:23:40,326 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:23:40,327 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:23:40,327 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:23:40,327 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:23:40,327 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:23:40,327 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:23:40,327 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:23:40,328 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:23:40,328 [INFO] INFO: Object Definition:
2022-05-09 01:23:40,328 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:23:40,328 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:23:40,328 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:23:40,329 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:23:40,329 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:23:40,329 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:23:40,329 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:23:40,330 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:23:40,330 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:23:40,330 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:23:40,330 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:23:40,330 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:24:29,019 [INFO] INFO: Configuration initialized!
2022-05-09 01:24:29,020 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:24:29,020 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:24:29,973 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:24:29,973 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:24:29,974 [INFO] INFO: Variable Definition:
2022-05-09 01:24:29,974 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:24:29,974 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:24:29,974 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:24:29,974 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:24:29,974 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:24:29,975 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:24:29,975 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:24:29,975 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:24:29,975 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:24:29,975 [INFO] INFO: Object Definition:
2022-05-09 01:24:29,975 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:24:29,975 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:24:29,976 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:24:29,976 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:24:29,976 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:24:29,976 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:24:29,976 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:24:29,976 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:24:29,977 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:24:29,977 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:24:29,977 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:24:29,977 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:25:50,767 [INFO] INFO: Configuration initialized!
2022-05-09 01:25:50,767 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:25:50,768 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:25:51,702 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:25:51,703 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:25:51,703 [INFO] INFO: Variable Definition:
2022-05-09 01:25:51,703 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:25:51,703 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:25:51,703 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:25:51,703 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:25:51,704 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:25:51,704 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:25:51,704 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:25:51,704 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:25:51,704 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:25:51,704 [INFO] INFO: Object Definition:
2022-05-09 01:25:51,704 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:25:51,705 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:25:51,705 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:25:51,705 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:25:51,705 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:25:51,705 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:25:51,705 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:25:51,706 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:25:51,706 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:25:51,706 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:25:51,706 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:25:51,706 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:33:03,334 [INFO] INFO: Configuration initialized!
2022-05-09 01:33:03,334 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:33:03,334 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:33:04,192 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:33:04,192 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:33:04,192 [INFO] INFO: Variable Definition:
2022-05-09 01:33:04,192 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:33:04,192 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:33:04,193 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:33:04,193 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:33:04,193 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:33:04,193 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:33:04,193 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:33:04,193 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:33:04,194 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:33:04,194 [INFO] INFO: Object Definition:
2022-05-09 01:33:04,194 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:33:04,194 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:33:04,194 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:33:04,194 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:33:04,195 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:33:04,195 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:33:04,195 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:33:04,195 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:33:04,195 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:33:04,196 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:33:04,196 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:33:04,196 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:38:34,988 [INFO] INFO: Configuration initialized!
2022-05-09 01:38:34,988 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:38:34,988 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:38:35,761 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:38:35,762 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:38:35,763 [INFO] INFO: Variable Definition:
2022-05-09 01:38:35,763 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:38:35,763 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:38:35,763 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:38:35,763 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:38:35,764 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:38:35,764 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:38:35,764 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:38:35,764 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:38:35,764 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:38:35,765 [INFO] INFO: Object Definition:
2022-05-09 01:38:35,765 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:38:35,765 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:38:35,765 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:38:35,765 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:38:35,766 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:38:35,766 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:38:35,766 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:38:35,766 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:38:35,767 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:38:35,767 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:38:35,767 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:38:35,767 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 01:48:40,336 [INFO] INFO: Configuration initialized!
2022-05-09 01:48:40,336 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 01:48:40,336 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 01:48:41,157 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 01:48:41,157 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 01:48:41,157 [INFO] INFO: Variable Definition:
2022-05-09 01:48:41,157 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 01:48:41,158 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 01:48:41,158 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 01:48:41,158 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 01:48:41,158 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 01:48:41,159 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 01:48:41,159 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 01:48:41,159 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 01:48:41,159 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 01:48:41,159 [INFO] INFO: Object Definition:
2022-05-09 01:48:41,159 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 01:48:41,159 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 01:48:41,160 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 01:48:41,160 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 01:48:41,160 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 01:48:41,160 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 01:48:41,160 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 01:48:41,160 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 01:48:41,160 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 01:48:41,161 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 01:48:41,161 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 01:48:41,161 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 15:58:47,040 [INFO] INFO: Configuration initialized!
2022-05-09 15:58:47,041 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 15:58:47,041 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 15:59:30,333 [INFO] INFO: Configuration initialized!
2022-05-09 15:59:30,333 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 15:59:30,333 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 15:59:31,353 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 15:59:31,353 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 15:59:31,353 [INFO] INFO: Variable Definition:
2022-05-09 15:59:31,353 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 15:59:31,354 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 15:59:31,354 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 15:59:31,354 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 15:59:31,354 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 15:59:31,354 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 15:59:31,355 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 15:59:31,355 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 15:59:31,355 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 15:59:31,355 [INFO] INFO: Object Definition:
2022-05-09 15:59:31,355 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 15:59:31,355 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 15:59:31,355 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 15:59:31,356 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 15:59:31,356 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 15:59:31,356 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 15:59:31,356 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 15:59:31,356 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 15:59:31,357 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 15:59:31,357 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 15:59:31,357 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 15:59:31,357 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:00:20,540 [INFO] INFO: Configuration initialized!
2022-05-09 16:00:20,540 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:00:20,546 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:00:21,813 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:00:21,813 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:00:21,813 [INFO] INFO: Variable Definition:
2022-05-09 16:00:21,814 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:00:21,814 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:00:21,814 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:00:21,814 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:00:21,814 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:00:21,814 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:00:21,814 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:00:21,814 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:00:21,815 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:00:21,815 [INFO] INFO: Object Definition:
2022-05-09 16:00:21,815 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:00:21,815 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:00:21,815 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:00:21,815 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:00:21,815 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:00:21,815 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:00:21,815 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:00:21,816 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:00:21,816 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:00:21,816 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:00:21,816 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:00:21,816 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:01:04,103 [INFO] INFO: Configuration initialized!
2022-05-09 16:01:04,103 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:01:04,103 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:01:04,976 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:01:04,977 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:01:04,977 [INFO] INFO: Variable Definition:
2022-05-09 16:01:04,977 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:01:04,977 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:01:04,977 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:01:04,977 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:01:04,977 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:01:04,978 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:01:04,978 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:01:04,978 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:01:04,978 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:01:04,978 [INFO] INFO: Object Definition:
2022-05-09 16:01:04,978 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:01:04,978 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:01:04,979 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:01:04,979 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:01:04,979 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:01:04,979 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:01:04,979 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:01:04,979 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:01:04,980 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:01:04,980 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:01:04,980 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:01:04,980 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:01:48,197 [INFO] INFO: Configuration initialized!
2022-05-09 16:01:48,198 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:01:48,198 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:01:49,086 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:01:49,086 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:01:49,086 [INFO] INFO: Variable Definition:
2022-05-09 16:01:49,086 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:01:49,086 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:01:49,086 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:01:49,086 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:01:49,087 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:01:49,087 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:01:49,087 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:01:49,087 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:01:49,087 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:01:49,087 [INFO] INFO: Object Definition:
2022-05-09 16:01:49,088 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:01:49,088 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:01:49,088 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:01:49,088 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:01:49,088 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:01:49,088 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:01:49,088 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:01:49,089 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:01:49,089 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:01:49,089 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:01:49,089 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:01:49,089 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:07:46,731 [INFO] INFO: Configuration initialized!
2022-05-09 16:07:46,731 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:07:46,732 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:07:47,755 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:07:47,755 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:07:47,755 [INFO] INFO: Variable Definition:
2022-05-09 16:07:47,755 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:07:47,756 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:07:47,756 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:07:47,756 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:07:47,756 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:07:47,756 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:07:47,756 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:07:47,756 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:07:47,757 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:07:47,757 [INFO] INFO: Object Definition:
2022-05-09 16:07:47,757 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:07:47,757 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:07:47,757 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:07:47,757 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:07:47,758 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:07:47,758 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:07:47,758 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:07:47,758 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:07:47,758 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:07:47,758 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:07:47,759 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:07:47,759 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:10:11,276 [INFO] INFO: Configuration initialized!
2022-05-09 16:10:11,276 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:10:11,282 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:10:12,186 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:10:12,187 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:10:12,187 [INFO] INFO: Variable Definition:
2022-05-09 16:10:12,187 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:10:12,187 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:10:12,187 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:10:12,187 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:10:12,187 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:10:12,188 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:10:12,188 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:10:12,188 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:10:12,188 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:10:12,188 [INFO] INFO: Object Definition:
2022-05-09 16:10:12,188 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:10:12,188 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:10:12,188 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:10:12,188 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:10:12,189 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:10:12,189 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:10:12,189 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:10:12,189 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:10:12,189 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:10:12,189 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:10:12,190 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:10:12,190 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:11:19,412 [INFO] INFO: Configuration initialized!
2022-05-09 16:11:19,412 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:11:19,418 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:11:20,309 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:11:20,309 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:11:20,310 [INFO] INFO: Variable Definition:
2022-05-09 16:11:20,310 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:11:20,310 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:11:20,310 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:11:20,310 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:11:20,310 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:11:20,310 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:11:20,311 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:11:20,311 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:11:20,311 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:11:20,311 [INFO] INFO: Object Definition:
2022-05-09 16:11:20,311 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:11:20,311 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:11:20,311 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:11:20,311 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:11:20,311 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:11:20,312 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:11:20,312 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:11:20,312 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:11:20,312 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:11:20,312 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:11:20,312 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:11:20,312 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:14:26,788 [INFO] INFO: Configuration initialized!
2022-05-09 16:14:26,788 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:14:26,788 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:14:27,615 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:14:27,615 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:14:27,616 [INFO] INFO: Variable Definition:
2022-05-09 16:14:27,616 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:14:27,616 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:14:27,616 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:14:27,616 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:14:27,616 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:14:27,616 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:14:27,616 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:14:27,617 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:14:27,617 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:14:27,617 [INFO] INFO: Object Definition:
2022-05-09 16:14:27,617 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:14:27,617 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:14:27,617 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:14:27,618 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:14:27,618 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:14:27,618 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:14:27,618 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:14:27,618 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:14:27,618 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:14:27,618 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:14:27,619 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:14:27,619 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:16:07,701 [INFO] INFO: Configuration initialized!
2022-05-09 16:16:07,701 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:16:07,702 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:16:08,621 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:16:08,621 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:16:08,621 [INFO] INFO: Variable Definition:
2022-05-09 16:16:08,622 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:16:08,622 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:16:08,622 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:16:08,622 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:16:08,622 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:16:08,622 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:16:08,622 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:16:08,623 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:16:08,623 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:16:08,623 [INFO] INFO: Object Definition:
2022-05-09 16:16:08,623 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:16:08,623 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:16:08,623 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:16:08,623 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:16:08,624 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:16:08,624 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:16:08,624 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:16:08,624 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:16:08,624 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:16:08,624 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:16:08,625 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:16:08,625 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:16:56,745 [INFO] INFO: Configuration initialized!
2022-05-09 16:16:56,745 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:16:56,745 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:16:57,572 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:16:57,572 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:16:57,573 [INFO] INFO: Variable Definition:
2022-05-09 16:16:57,573 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:16:57,573 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:16:57,573 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:16:57,573 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:16:57,574 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:16:57,574 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:16:57,574 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:16:57,574 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:16:57,574 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:16:57,574 [INFO] INFO: Object Definition:
2022-05-09 16:16:57,575 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:16:57,575 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:16:57,575 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:16:57,575 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:16:57,576 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:16:57,576 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:16:57,576 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:16:57,576 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:16:57,576 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:16:57,576 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:16:57,577 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:16:57,577 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:18:06,843 [INFO] INFO: Configuration initialized!
2022-05-09 16:18:06,843 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:18:06,843 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:18:07,697 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:18:07,697 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:18:07,697 [INFO] INFO: Variable Definition:
2022-05-09 16:18:07,697 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:18:07,698 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:18:07,698 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:18:07,698 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:18:07,698 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:18:07,698 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:18:07,699 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:18:07,699 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:18:07,699 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:18:07,699 [INFO] INFO: Object Definition:
2022-05-09 16:18:07,699 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:18:07,700 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:18:07,700 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:18:07,700 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:18:07,700 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:18:07,700 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:18:07,700 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:18:07,701 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:18:07,701 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:18:07,701 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:18:07,701 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:18:07,701 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:18:31,326 [INFO] INFO: Configuration initialized!
2022-05-09 16:18:31,327 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:18:31,327 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:18:32,178 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:18:32,178 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:18:32,178 [INFO] INFO: Variable Definition:
2022-05-09 16:18:32,178 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:18:32,179 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:18:32,179 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:18:32,179 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:18:32,179 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:18:32,179 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:18:32,180 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:18:32,180 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:18:32,180 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:18:32,180 [INFO] INFO: Object Definition:
2022-05-09 16:18:32,180 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:18:32,181 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:18:32,181 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:18:32,181 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:18:32,181 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:18:32,181 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:18:32,182 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:18:32,182 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:18:32,182 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:18:32,182 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:18:32,182 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:18:32,183 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:20:14,057 [INFO] INFO: Configuration initialized!
2022-05-09 16:20:14,058 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:20:14,058 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:20:14,940 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:20:14,940 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:20:14,940 [INFO] INFO: Variable Definition:
2022-05-09 16:20:14,941 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:20:14,941 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:20:14,941 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:20:14,941 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:20:14,941 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:20:14,941 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:20:14,941 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:20:14,942 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:20:14,942 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:20:14,942 [INFO] INFO: Object Definition:
2022-05-09 16:20:14,942 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:20:14,942 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:20:14,942 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:20:14,943 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:20:14,943 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:20:14,943 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:20:14,943 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:20:14,944 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:20:14,944 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:20:14,944 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:20:14,944 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:20:14,944 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:23:08,810 [INFO] INFO: Configuration initialized!
2022-05-09 16:23:08,810 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:23:08,811 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:23:09,655 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:23:09,655 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:23:09,656 [INFO] INFO: Variable Definition:
2022-05-09 16:23:09,656 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:23:09,656 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:23:09,656 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:23:09,656 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:23:09,656 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:23:09,657 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:23:09,657 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:23:09,657 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:23:09,657 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:23:09,657 [INFO] INFO: Object Definition:
2022-05-09 16:23:09,657 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:23:09,658 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:23:09,658 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:23:09,659 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:23:09,659 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:23:09,659 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:23:09,659 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:23:09,659 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:23:09,659 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:23:09,660 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:23:09,660 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:23:09,660 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:26:06,227 [INFO] INFO: Configuration initialized!
2022-05-09 16:26:06,227 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:26:06,227 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:26:07,039 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:26:07,039 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:26:07,040 [INFO] INFO: Variable Definition:
2022-05-09 16:26:07,040 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:26:07,040 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:26:07,040 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:26:07,040 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:26:07,041 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:26:07,041 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:26:07,041 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:26:07,041 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:26:07,041 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:26:07,041 [INFO] INFO: Object Definition:
2022-05-09 16:26:07,041 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:26:07,042 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:26:07,042 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:26:07,042 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:26:07,042 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:26:07,042 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:26:07,043 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:26:07,043 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:26:07,043 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:26:07,043 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:26:07,043 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:26:07,044 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:27:42,229 [INFO] INFO: Configuration initialized!
2022-05-09 16:27:42,229 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:27:42,229 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:27:43,175 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:27:43,175 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:27:43,175 [INFO] INFO: Variable Definition:
2022-05-09 16:27:43,175 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:27:43,175 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:27:43,175 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:27:43,175 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:27:43,176 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:27:43,176 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:27:43,176 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:27:43,176 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:27:43,176 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:27:43,176 [INFO] INFO: Object Definition:
2022-05-09 16:27:43,176 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:27:43,176 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:27:43,177 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:27:43,177 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:27:43,177 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:27:43,177 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:27:43,177 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:27:43,177 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:27:43,177 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:27:43,178 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:27:43,178 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:27:43,178 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-09 16:29:42,148 [INFO] INFO: Configuration initialized!
2022-05-09 16:29:42,149 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-09 16:29:42,149 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-09 16:29:42,969 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-09 16:29:42,969 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-09 16:29:42,969 [INFO] INFO: Variable Definition:
2022-05-09 16:29:42,969 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-09 16:29:42,969 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-09 16:29:42,969 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-09 16:29:42,969 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-09 16:29:42,970 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-09 16:29:42,970 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-09 16:29:42,970 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-09 16:29:42,970 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-09 16:29:42,970 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-09 16:29:42,970 [INFO] INFO: Object Definition:
2022-05-09 16:29:42,970 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-09 16:29:42,970 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-09 16:29:42,971 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-09 16:29:42,971 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-09 16:29:42,971 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-09 16:29:42,971 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-09 16:29:42,971 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-09 16:29:42,971 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-09 16:29:42,972 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-09 16:29:42,972 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-09 16:29:42,972 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-09 16:29:42,972 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-17 23:42:37,974 [INFO] INFO: Configuration initialized!
2022-05-17 23:42:37,975 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-17 23:42:37,975 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-17 23:42:39,179 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-17 23:42:39,180 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-17 23:42:39,180 [INFO] INFO: Variable Definition:
2022-05-17 23:42:39,180 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-17 23:42:39,180 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-17 23:42:39,180 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-17 23:42:39,181 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-17 23:42:39,181 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-17 23:42:39,181 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-17 23:42:39,181 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-17 23:42:39,181 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-17 23:42:39,181 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-17 23:42:39,182 [INFO] INFO: Object Definition:
2022-05-17 23:42:39,182 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-17 23:42:39,182 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-17 23:42:39,182 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-17 23:42:39,182 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-17 23:42:39,182 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-17 23:42:39,182 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-17 23:42:39,183 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-17 23:42:39,183 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-17 23:42:39,183 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-17 23:42:39,183 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-17 23:42:39,183 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-17 23:42:39,183 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-17 23:45:05,418 [INFO] INFO: Configuration initialized!
2022-05-17 23:45:05,419 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-17 23:45:05,419 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-17 23:45:06,429 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-17 23:45:06,429 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-17 23:45:06,429 [INFO] INFO: Variable Definition:
2022-05-17 23:45:06,429 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-17 23:45:06,430 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-17 23:45:06,430 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-17 23:45:06,430 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-17 23:45:06,430 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-17 23:45:06,430 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-17 23:45:06,430 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-17 23:45:06,431 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-17 23:45:06,431 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-17 23:45:06,431 [INFO] INFO: Object Definition:
2022-05-17 23:45:06,431 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-17 23:45:06,431 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-17 23:45:06,431 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-17 23:45:06,431 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-17 23:45:06,432 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-17 23:45:06,432 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-17 23:45:06,432 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-17 23:45:06,432 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-17 23:45:06,432 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-17 23:45:06,432 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-17 23:45:06,433 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-17 23:45:06,433 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-17 23:47:51,609 [INFO] INFO: Configuration initialized!
2022-05-17 23:47:51,609 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-17 23:47:51,609 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-17 23:47:52,548 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-17 23:47:52,548 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-17 23:47:52,548 [INFO] INFO: Variable Definition:
2022-05-17 23:47:52,548 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-17 23:47:52,548 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-17 23:47:52,549 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-17 23:47:52,549 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-17 23:47:52,549 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-17 23:47:52,549 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-17 23:47:52,549 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-17 23:47:52,549 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-17 23:47:52,549 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-17 23:47:52,550 [INFO] INFO: Object Definition:
2022-05-17 23:47:52,550 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-17 23:47:52,550 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-17 23:47:52,550 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-17 23:47:52,550 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-17 23:47:52,550 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-17 23:47:52,550 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-17 23:47:52,551 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-17 23:47:52,551 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-17 23:47:52,551 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-17 23:47:52,551 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-17 23:47:52,552 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-17 23:47:52,552 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-17 23:50:56,812 [INFO] INFO: Configuration initialized!
2022-05-17 23:50:56,812 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-17 23:50:56,812 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-17 23:50:57,997 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-17 23:50:57,997 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-17 23:50:57,997 [INFO] INFO: Variable Definition:
2022-05-17 23:50:57,998 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-17 23:50:57,998 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-17 23:50:57,998 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-17 23:50:57,998 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-17 23:50:57,998 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-17 23:50:57,999 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-17 23:50:57,999 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-17 23:50:57,999 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-17 23:50:57,999 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-17 23:50:57,999 [INFO] INFO: Object Definition:
2022-05-17 23:50:57,999 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-17 23:50:57,999 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-17 23:50:58,000 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-17 23:50:58,000 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-17 23:50:58,000 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-17 23:50:58,000 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-17 23:50:58,001 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-17 23:50:58,003 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-17 23:50:58,004 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-17 23:50:58,005 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-17 23:50:58,005 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-17 23:50:58,005 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-17 23:51:17,323 [INFO] INFO: Configuration initialized!
2022-05-17 23:51:17,324 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-17 23:51:17,324 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-17 23:51:18,216 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-17 23:51:18,216 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-17 23:51:18,216 [INFO] INFO: Variable Definition:
2022-05-17 23:51:18,216 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-17 23:51:18,216 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-17 23:51:18,216 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-17 23:51:18,217 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-17 23:51:18,217 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-17 23:51:18,217 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-17 23:51:18,217 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-17 23:51:18,217 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-17 23:51:18,217 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-17 23:51:18,217 [INFO] INFO: Object Definition:
2022-05-17 23:51:18,217 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-17 23:51:18,217 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-17 23:51:18,217 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-17 23:51:18,217 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-17 23:51:18,218 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-17 23:51:18,218 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-17 23:51:18,218 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-17 23:51:18,218 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-17 23:51:18,218 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-17 23:51:18,218 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-17 23:51:18,218 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-17 23:51:18,218 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
2022-05-19 03:13:11,592 [INFO] INFO: Configuration initialized!
2022-05-19 03:13:11,593 [MODEL] INFO: Setting Vggtiny_backbone!
2022-05-19 03:13:11,593 [MODEL] INFO: Enable model backbone pretraining:False
2022-05-19 03:13:13,001 [MODEL] INFO: Using LightweightOpenpose model arch!
2022-05-19 03:13:13,002 [INFO] INFO: Welcome to Hyperpose Development Platform!
2022-05-19 03:13:13,002 [INFO] INFO: Variable Definition:
2022-05-19 03:13:13,002 [INFO] INFO: parts: 	 the joints of human body, Enum class
2022-05-19 03:13:13,003 [INFO] INFO: limbs: 	 the limbs of human body, List of tuple.	 example: [(joint index 1, joint index 2),...]
2022-05-19 03:13:13,003 [INFO] INFO: colors:	the visualize color for each parts, List.	 example: [(0,0,255),...] (optional)
2022-05-19 03:13:13,003 [INFO] INFO: n_parts:	number of human body joints, int.	 example: n_parts=len(parts)
2022-05-19 03:13:13,003 [INFO] INFO: n_limbs:	number of human body limbs, int.	 example: n_limbs=len(limbs)
2022-05-19 03:13:13,004 [INFO] INFO: hin: 	 height of the model input image, int.	 example: 368
2022-05-19 03:13:13,004 [INFO] INFO: win: 	 width of the model input image, int.	 example: 368
2022-05-19 03:13:13,004 [INFO] INFO: hout: 	 height of model output heatmap, int.	 example: 46
2022-05-19 03:13:13,004 [INFO] INFO: wout: 	 wout of model output heatmap, int.	 example: 46
2022-05-19 03:13:13,005 [INFO] INFO: Object Definition:
2022-05-19 03:13:13,005 [INFO] INFO: config: a object contains all the configurations used to assemble the model, dataset, and pipeline. easydict object.
	 return by the `Config.get_config` function.

2022-05-19 03:13:13,005 [INFO] INFO: model: a neural network takes in the image and output the calculated activation map. BasicModel object.
	 have `forward`, `cal_loss`, `infer`(optional) functions.
	 custom: users could inherit the Model.BasicModel class for customization.
	 example: please refer to Model.LightWeightOpenPose class for details. 

2022-05-19 03:13:13,005 [INFO] INFO: dataset: a dataset generator provides train and evaluate dataset. Base_dataset object.
	 have `get_train_dataset` and `get_eval_dataset` functions.
	 custom: users could inherit the Dataset.BasicDataset class for customizationn
	 example: please refer to Datset.CocoDataset class for details.

2022-05-19 03:13:13,005 [INFO] INFO: augmentor: a data augmentor that takes in the image, key point annotation, mask and perform affine transformation for data augmentation. BasicAumentor object.
	 have `process` and `process_only_image` functions.
	 custom: users could inherit the Model.BasicAugmentor class for customization.
	 example: please refer to Model.BasicAugmentor class for details.

2022-05-19 03:13:13,006 [INFO] INFO: preprocessor: a data preprocessor that takes in the image, key point annotation and mask to produce the target heatmap
	for model to calculate loss and learn. BasicPreProcessor object.
	 have `process` function.
	 custom: users could inherit the Model.BasicPreProcessor class for customizationn
	 example: please refer to Model.openpose.PreProcessor class for details.

2022-05-19 03:13:13,006 [INFO] INFO: postprocessor: a data postprocessor that takes in the predicted heatmaps and infer the human body joints and limbs.
	 have `process` function. BasicPostProcessor object.
	 custom: users could inherit the Model.BasicPostProcessor class for customization
	 example: please refer to the Model.openpose.PostProcessor class for details.

2022-05-19 03:13:13,006 [INFO] INFO: visualizer: a visualizer that takes in the predicted heatmaps and output visualization images for train and evaluation.
	 have `visualize` and `visualize_comapre` functions. BasicVisualizer object.
	 custom: users could inherit the Model.BasicVisualizer class for customization.
	 example: please refer to the Model.openpose.Visualizer class for details.

2022-05-19 03:13:13,006 [INFO] INFO: Development platform basic usage:
	1.Use the `sets` APIs of Config module to configure the pipeline, choose the algorithm type, the neural network
	backbone, the dataset etc. that best fit your application scenario.
	2.Use the `get_model` API of Model module to get the configured model, use `get_dataset` API of dataset module to
	get the configured dataset, use the `get_train` API of Model module to get the configured train procedure. Then start
	training! Check the loss values and sample training result images during training.
	3.Use the `get_eval` API of Model module to get the configured evaluation procedure. evaluate the model you trained. 
	4.Eport the model to .pb, .onnx, .tflite formats for deployment.
2022-05-19 03:13:13,007 [INFO] INFO: Development platform custom usage:
	 Hyperpose enables users to custom model, dataset, augmentor, preprocessor, postprocessor and visualizer.
	 Users could inherit the corresponding basic class(mentioned above), and implement corresponding the member functions
	required according to the function annotation, then use Config.set_custom_xxx APIs to set the custom component.
2022-05-19 03:13:13,007 [INFO] INFO: Additional features:
	 1.Parallel distributed training with Kungfu.
	 2.Domain adaption to leverage unlabled data.
	 3.Neural network backbone pretraining.
2022-05-19 03:13:13,007 [INFO] INFO: Currently all the procedures are uniformed to be `channels_first` data format.
2022-05-19 03:13:13,008 [INFO] INFO: Currently all model weights are saved in `npz_dict` format.
